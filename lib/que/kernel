
function help/que/sub() {
  cat << EOF
\$1 string  - mode
\$2 string  - job file
\$3 logical - check
EOF
}

# subroutines
function que/jobchk() {
  local i
  for i in NAME MODE QUEUE RUN ; do
    if empty "${!i}" ; then
      msg "${FUNCNAME} not set ${i}"
      $failure
    fi
  done
}

function que/quechk() {
  local i
  for i in QSCHED ; do
    if empty "${!i}" ; then
      msg "${FUNCNAME} not set ${i}"
      $failure
    fi
  done
}

function que/autoenv() {
  local _v="${1}"
  local _w=""
  if empty "${_v}" ; then $failure ; fi

  # ESZR
  _w="ESZR_${_v}"
  if test "${!_v}" = "eszr" ; then
    if empty "${!_w}" ; then
      msg "${FUNCNAME}: not set ${_w}"
      $failure
    fi
    echo "${!_w}"
    return
  fi
  echo ${!_v}
}

function que/check() {
  local _cmd="${1##runprg}"
  local _sub="${2:-BATCH}"
  local _prg=""
  local _guide=""
  local _sch=""

  # reprocess args
  OPTIND=1
  local _o
  while getopts p:g:s: _opt ${_cmd[@]}; do
    case ${_opt} in
      p) _prg=${OPTARG};;
      g) _guide=${OPTARG};;
      s) _sch=${OPTARG};;
    esac
  done

  if empty "${_prg}" ; then
    msg "${FUNCNAME}: program module not set"
    $failed
  fi

  if empty "${_guide}" || \
   ! readable "${_guide}" ; then
    msg "${FUNCNAME}: guide not found ${_guide}"
    $failure
  fi

  import run
  # summary
  if test "${_sub}" = "SUMMARY" ; then
    import run
    run/sum "${_prg}" "${_guide}"
    return $?
  fi
  # check
  import run/check
  run/check 2 "${_prg}" "${_guide}"
}

function que/sub() {
  import gui
  import que
  import que/track

  local _sub=${1:-BATCH}
  local _job=${2:-${gbn}.job}
  # check level
  local _chk=${3:-false}

  ### track database
  if test "${_sub}" = "LIST" ; then
    que/track/list
    return $?
  fi

  ### read job file
  if ! readable "${_job}" ; then
    msg "${FUNCNAME}: job file not found ${_job}"
    $failure
  fi
  source ${_job}
  que/jobchk
  if failed $? ; then $failure; fi

  ### summary
  if test "${_sub}" = "CHECK" ; then
    que/check "${RUN}" "${_sub}"
    return $?
  fi

  msg "Job file    : ${_job}"

  ### read queue file
  local _que="${que_dir}/${QUEUE:-default}"
  if ! readable "${_que}" ; then
    msg "${FUNCNAME}: queue file not found ${_que}"
    $failure
  fi
  source "${_que}"
  que/quechk
  if failed $? ; then $failure; fi

  msg "Queue file  : ${_que}"

  ### global IO defaults
  QIN=${QIN:-/dev/null}
  QERR=${QERR:-ErrOut}
  QOUT=${QOUT:-StdOut}

  ### parallel mode
  MODE=$(que/autoenv MODE)
  local _mode=$(field "${MODE}" 1 /)
  local _mpi=$(field "${MODE}" 2 /)
  # non-MPI run
  if test "${_mode}" = "${_mpi}" ; then
    _mpi=""
  fi

  ### scheduler
  QSCHED=$(que/autoenv QSCHED)
  local _sch=${QSCHED}
  import que/${_sch}
  if failed $?; then $failure ; fi

  ### nodes
  local _nodes=${NODES:-1}
  if test "${_mode}" = "omp" ; then
    if test ${_nodes} -gt 1 ; then
      msg "${FUNCNAME}: for OMP set NODES=1"
      $failure
    fi
  fi

  ### sockets per node
  SCKTS=$(que/autoenv SCKTS)
  local _sckts=${SCKTS:-1}

  ### cores per socket
  CORES=$(que/autoenv CORES)
  local _cores=${CORES:-2}

  ### forced slots per node
  SLTPN=$(que/autoenv SLTPN)
  local _sltpn=${SLTPN:-0}

  ### forced mpi procs per node
  local _mpipn=${MPIPN:-0}
  local _mpinp=$((_nodes*_mpipn))

  ### forced threads per core
  local _thrds=${THRDS:-0}

  ### compound resources
  # total sockets
  local _sockets=$((_nodes*_sckts))
  # tasks per node
  local _tasks=$((_sckts*_cores))
  # total slots
  local _slots=$((_nodes*_tasks))
  # forced slots
  local __slots=$((_nodes*_sltpn))
  # threads
  local _threads=${_tasks}

  ### global compound resources
  SLOTS=${_slots}
  TASKS=${_tasks}
  # override tasks per node
  if test ${__slots} -gt 0 ; then
    SLOTS=${__slots}
    TASKS=${_sltpn}
  fi

  ### write batch file
  local _bat="./${_sch}.batch.sh"
  if test "${_sub}" = "LOGIN" ; then
    _bat="./${_sch}.login.sh"
  fi
  echo "#!${que_shell}"               > "${_bat}"
  echo "### Date $(date)"            >> "${_bat}"
  echo ""                            >> "${_bat}"
  echo "### Scheduler  : ${_sch}"    >> "${_bat}"
  que/${_sch} "${_sub}" "${_bat}"
  if failed $? ; then $failure; fi

  ### requested resources
  local _over=""
  if test ${__slots} -gt 0 ; then
    _over="SLOTS TASKS"
  fi
  gui/line
  printf "%12s %5s %5s %7s %s\n"   "QSCHED" "NODES"   "SCKTS"   "CORES"     "override"
  printf "%12s %5d %5d %7d %s\n"   ${_sch}  ${_nodes} ${_sckts} ${_cores}   " "
  printf "%12s %5s %5s %7s %s\n"   " "      "SLOTS"   "TASKS"   "sockets"   "${_over}"
  printf "%12s %5d %5d %7d %s\n"   " "      ${SLOTS}  ${TASKS}  ${_sockets} " "
  echo ""                                                                              >> "${_bat}"
  echo   "### Resource Allocation"                                                     >> "${_bat}"
  printf "# %12s %5s %5s %7s %s\n" "QSCHED" "NODES"   "SCKTS"   "CORES"     "override" >> "${_bat}"
  printf "# %12s %5d %5d %7d %s\n" ${_sch}  ${_nodes} ${_sckts} ${_cores}   " "        >> "${_bat}"
  printf "# %12s %5s %5s %7s %s\n" " "      "SLOTS"   "TASKS"   "sockets"   "${_over}" >> "${_bat}"
  printf "# %12s %5d %5d %7d %s\n" " "      ${SLOTS}  ${TASKS}  ${_sockets} " "        >> "${_bat}"

  ### queue login
  if test "${_sub}" = "LOGIN" ; then
    echo ""
    answer "Show batch file?"
    if succeed $? ; then
      gui/line
      cat "${_bat}"
      gui/line
    fi
    echo ""
    answer "Queue login?"
    if failed $? ; then $failure; fi

    bash "${_bat}"
    return $?
  fi

  ### continue batch file
  # custom queue setup scripts
  if ! empty "${QSETUP}" ; then
    echo ""                          >> "${_bat}"
    echo "### Queue Setup"           >> "${_bat}"
    local _s
    for _s in ${QSETUP} ; do
      echo "source ${_s}"            >> "${_bat}"
    done
  fi

  # ulimit settings
  if ! empty "${QULIMIT}" ; then
    echo "${QULIMIT}"                >> "${_bat}"
  fi

  # mail notifications
  if test "${QMAIL}" = "runprg" ; then
    echo ""                          >> "${_bat}"
    echo "### Mail Setup"            >> "${_bat}"
    echo "export QMAILTO=${QMAILTO}" >> "${_bat}"
    msg "Mail by runprg"
  fi

  # custom job setup scripts
  if ! empty "${SETUP}" ; then
    echo ""                          >> "${_bat}"
    echo "### Job Setup"             >> "${_bat}"
    local _s
    for _s in ${SETUP} ; do
      echo "source ${_s}"            >> "${_bat}"
    done
  fi

  # environment modules
  if ! empty "${MODULE}" ; then
    echo ""                          >> "${_bat}"
    echo "### Modules"               >> "${_bat}"
    local _m
    for _m in ${MODULE} ; do
      echo "module load ${_m}"       >> "${_bat}"
    done
  fi

  ### Toggle Options
  if ! empty "${TOGGLE}" ; then
    echo ""                          >> "${_bat}"
    echo "### Options"               >> "${_bat}"
    local t
    for t in ${TOGGLE} ; do
      echo "export ${t}=1"           >> "${_bat}"
    done
  fi

  # cpu binding
  local _bind=""
  if ! empty "${BIND}" ; then
    _bind="${BIND}"
    # msg "CPU Binding : ${_bind}"
  fi

  # profiler
  local _prof=""
  if ! empty "${PROF}" ; then
    _prof="${PROF}"
    # msg "Profiler    : ${_prof}"
  fi

  # verbose level
  local _v=${VERBOSE:-0}

  ### begin MPI or MPIOMP
  if test "${_mode}" = "mpi" || \
     test "${_mode}" = "mpiomp" ; then

    if empty "${_mpi}" ; then
      msg "${FUNCNAME}: set MPI type"
      $failure
    fi

    # SGI MPT Perfboost like booster
    local _boost=""
    if ! empty "${BOOST}" ; then
      _boost="${BOOST}"
      msg "Perfboost : ${_boost}"
    fi

    # defaults for MPIOMP
    # no of mpi processes (sckts*nodes)
    local _np=${_sockets}
    # mpi process per node
    local _pn=${_sckts}
    _threads=${_cores}

    # defaults for MPI
    if test "${_mode}" = "mpi" ; then
      _np=${_slots}
      _pn=${_tasks}
      _threads=1
    fi

    # override by MPIPN for over/undersubscribe
    if test ${_mpipn} -gt 0 ; then
      _np=${_mpinp}
      _pn=${_mpipn}
    fi

    ### MPI
    # list of execution hosts
    local _machines=""
    # list of execution hosts in a file
    local _machinefile=""
    # total procs and procs per node 
    local _nppn=""
    # mpirun
    local _mpirun_opt=""
    if ! empty "${MPIRUN_OPT}" ; then
      _mpirun_opt="${MPIRUN_OPT}"
    fi
    local _mpi_opt="${_mpirun_opt}"

    echo ""                                             >> "${_bat}"
    echo "### MPI Setup"                                >> "${_bat}"
    if test "${_mpi}" = "self" ; then
      # implicit MPI
      echo "# Implicit MPI"                             >> "${_bat}"
      if ! empty "${_mpirun_opt}" ; then
        echo "export MPIRUN_OPTIONS=\"${_mpirun_opt}\"" >> "${_bat}"
      fi
    else
      # explicit MPI
      import hpc/mpi/${_mpi}
      if failed $? ; then $failure ; fi

      local _mpirun="hpc_mpi_${_mpi}_mpirun"
      _mpirun=${MPIRUN:-${!_mpirun}}

      _machinefile=$(hpc/mpi/${_mpi}/machinefile)
      _machines=$(hpc/mpi/${_mpi}/machines MACHINES)
      _nppn=$(hpc/mpi/${_mpi}/nppn ${_np} ${_pn})
      # machines
      local __machines="${_machinefile} ${_machines}"

      # verbose
      local _verbose=$(hpc/mpi/${_mpi}/verbose ${_v} "${_bat}")

      # predefined bindings
      case "${_bind}" in
        core|socket|cache)
          _bind=$(hpc/mpi/${_mpi}/binding ${_bind})
        ;;
      esac

      ### static distribution
      # PRERUN    VERBOSE     OPTIONS     MACHINES      NPPN     NUMA     BINDING  BOOST     PROFILER
      # _mpi_opt="${_verbose} ${_mpi_opt} ${__machines} ${_nppn} \${NUMA} ${_bind} ${_boost} ${_prof}"
      # echo "export MPI_OPT=\"${_mpi_opt}\""             >> "${_bat}"
      # echo "export PRERUN=\"${_mpirun} \${MPI_OPT}\""   >> "${_bat}"

      ### runtime redistribution for mpi mpiomp switch
      echo "export MPI_MODE=\"${_mode}\""   >> "${_bat}"
      echo "export MPI_MPI=\"${_mpi}\""     >> "${_bat}"
      echo "export MPI_MAX_SLOTS=${SLOTS}"  >> "${_bat}"
      echo "export MPI_MAX_TASKS=${TASKS}"  >> "${_bat}"
      echo "export MPI_NUM_NODES=${NODES}"  >> "${_bat}"
      echo "export MPI_NPPN=\"${_nppn}\""   >> "${_bat}"

      ### job file compliance for easy syntax
      echo "export SCKTS=${SCKTS}"          >> "${_bat}"
      echo "export CORES=${CORES}"          >> "${_bat}"
      echo "export BIND=\"${_bind}\""       >> "${_bat}"

      # prerun should be @resolved
      # PRERUN  VERBOSE     OPTIONS     MACHINES      NPPN        NUMA     BINDING BOOST     PROFILER
      _mpi_opt="${_verbose} ${_mpi_opt} ${__machines} @{MPI_NPPN} \${NUMA} @{BIND} ${_boost} ${_prof}"
      echo "export MPI_OPT=\"${_mpi_opt}\""           >> "${_bat}"
      echo "export PRERUN=\"${_mpirun} \${MPI_OPT}\"" >> "${_bat}"
    fi

    echo ""                                    >> "${_bat}"
    echo "### Fortran Mulit-processing"        >> "${_bat}"
    import hpc/fmp
    hpc/fmp/binding ${_nodes} ${_pn}           "${_bat}"
  fi

  ### OMP and Intel MKL
  import hpc/omp
  import hpc/mkl
  echo ""                                      >> "${_bat}"
  echo "### OMP Setup"                         >> "${_bat}"
  if test "${_mode}" = "omp" ; then
    echo "export PRERUN=\"${_bind} ${_prof}\"" >> "${_bat}"
    _threads=${_tasks}
  fi
  # override threads by THRDS
  if test ${_thrds} -gt 0 ; then
    _threads=${_thrds}
  fi
  # OMP threads
  hpc/omp/binding ${_threads}                  "${_bat}"
  hpc/mkl/binding ${_threads}                  "${_bat}"

  ### requested MPI OMP resources
  _over=""
  if test ${_mpipn} -gt 0 ; then
    _over="pn"
  fi
  if test ${_thrds} -gt 0 ; then
    if empty "${_over}" ; then
      _over="threads"
    else
      _over="${_over} threads"
    fi
  fi

  printf "%12s %5s %5s %7s\n" "MODE" "np" "pn" "threads"
  echo ""                                                                          >> "${_bat}"
  echo "### Parallel Mode"                                                         >> "${_bat}"
  printf "# %12s %5s %5s %7s\n" "MODE" "np" "pn" "threads"                         >> "${_bat}"
  if test "${_mode}" = "omp" ; then
    printf "%12s %5s %5s %7d %s\n" ${MODE}  "-"    "-"    ${_threads} "${_over}"
    printf "# %12s %5s %5s %7d %s\n" ${MODE}  "-"    "-"    ${_threads} "${_over}" >> "${_bat}"
  else
    printf "%12s %5d %5d %7d %s\n" ${MODE}  ${_np} ${_pn} ${_threads} "${_over}"
    printf "# %12s %5d %5d %7d %s\n" ${MODE}  ${_np} ${_pn} ${_threads} "${_over}" >> "${_bat}"
  fi
  gui/line

  ### command
  # runprg wrapper
  echo ""            >> "${_bat}"
  echo "### Command" >> "${_bat}"
  if ! empty "${RUNPRG}" ; then
    local _p=$(field "${RUNPRG}" 1 " ")
    local _g=$(field "${RUNPRG}" 2 " ")
    if empty "${_p}" ; then
      msg "${FUNCNAME}: program not set"
      $failure
    fi
    _p="-p ${_p}"
    if ! empty "${_g}" ; then
      _g="-g ${_g}"
    else
      _g="-g ${_p}.guide"
    fi
    RUN="runprg ${_p} ${_g}"
  fi

  # set scheduler
  match RUN runprg
  if succeed $? ; then
    # set scheduler
    RUN="${RUN} -s ${_sch}"
    if ${_chk} ; then
      que/check "${RUN}"
      if failed $? ; then
        msg "${FUNCNAME}: job check failed"
        $failure
      fi
    fi
  fi
  echo "${RUN}"      >> "${_bat}"

  ### submit
  echo ""
  answer "Show batch file?"
  if succeed $? ; then
    gui/line
    cat "${_bat}"
    gui/line
  fi

  local _qsub="que_${_sch}_qsub"
  _qsub=${!_qsub}
  if ! $(u/installed "${_qsub}") ; then
    msg "${FUNCNAME}: not found ${_qsub}"
    $failure
  fi

  # submit
  answer "Submit job?"
  if failed $? ; then $failure; fi

  # clear stderr/out
  local i
  for i in "${QERR}" "${QOUT}" ; do
    if test -f "${i}" ; then
      rm -f "${i}"
    fi
  done
  local _log="./${_qsub}.log"
  ${_qsub} "${_bat}" | tee "${_log}"
  if failed $? ; then
    msg "${FUNCNAME}: Submit failed"
    $failure
  fi
  # insert
  # local _ctime

  msg "Submit success"
  $success
}
