function help/sys/vm/vbox() {
  cat << EOF

Virtual Box Manager

  list
  start
  pause
  stop
  off
  state
  clone
  info

EOF
  $success
}

function sys/vm/vbox() {
  import sys
  local _cmd=${1:-help}
  shift
  if test "${_cmd}" = "help" ; then
    help/sys/vm/vbox
    return $?
  fi
  sys/vm/vbox/${_cmd} $*
}

function sys/vm/vbox/list() {
  import gui
  local i
  local _fmt="%7s %-12s %s\n"
  local _s=false
  local _vm
  local _id
  printf "${_fmt}" "State" "VM" "ID"
  gui/line

  local j=1
  for i in $(${sys_vm_vbox_mgr} list vms) ; do
    j=$((++j%2))
    k=$((j+1))
    if test "$k" == "1" ; then
      _vm=$(echo "${i}" | sed s/\"//g)
      continue
    fi
    _id="${i}"

    sys/vm/vbox/running "${_vm}"
    if succeed $? ; then
      _s="Running"
    else
      _s="Down"
    fi
    printf "${_fmt}" "${_s}" "${_vm}" "${_id}"
  done
}

function sys/vm/vbox/host() {
  ${sys_vm_vbox_mgr} list hostinfo
}

function sys/vm/vbox/state() {
  local _vm="${1}"
  if empty "${_vm}" ; then echo ""; $failure ; fi

  ${sys_vm_vbox_mgr} showvminfo "${_vm}" 2>/dev/null | grep State
}

function sys/vm/vbox/running() {
  local _vm="${1}"
  if empty "${_vm}" ; then $failure ; fi

  local _s=$(sys/vm/vbox/state "${_vm}" | grep running)
  if empty "${_s}" ; then $failure ; fi

  $success
}

function sys/vm/vbox/start() {
  local _vm="${1}"
  if empty "${_vm}" ; then $failure ; fi

  local _s=$(sys/vm/vbox/state "${_vm}" | grep running)
  if ! empty "${_s}" ; then $failure ; fi

  answer "Start VM ${_vm}?"
  if failed $? ; then $failure ; fi

  ${sys_vm_vbox_mgr} startvm "${_vm}" --type headless
}

function sys/vm/vbox/pause() {
  local _vm="${1}"
  if empty "${_vm}" ; then $failure ; fi

  local _s=$(sys/vm/vbox/state "${_vm}" | grep running)
  if empty "${_s}" ; then $failure ; fi

  answer "Pause VM ${_vm}?"
  if failed $? ; then $failure ; fi

  ${sys_vm_vbox_mgr} controlvm "${_vm}" savestate
}

function sys/vm/vbox/stop() {
  local _vm="${1}"
  if empty "${_vm}" ; then $failure ; fi

  local _s=$(sys/vm/vbox/state "${_vm}" | grep running)
  if empty "${_s}" ; then $failure ; fi

  answer "Stop VM ${_vm}?"
  if failed $? ; then $failure ; fi

  ${sys_vm_vbox_mgr} controlvm "${_vm}" acpipowerbutton
  # ${sys_vm_vbox_mgr} controlvm "${_vm}" poweroff
}

function sys/vm/vbox/off() {
  local _vm="${1}"
  if empty "${_vm}" ; then $failure ; fi

  local _s=$(sys/vm/vbox/state "${_vm}" | grep running)
  if empty "${_s}" ; then $failure ; fi

  answer "Stop VM ${_vm}?"
  if failed $? ; then $failure ; fi

  ${sys_vm_vbox_mgr} controlvm "${_vm}" poweroff
}

function sys/vm/vbox/clone() {
  local _src="${1}"
  local _dst="${2}"
  if empty "${_src}" || empty "${_dst}" ; then $failure ; fi

  answer "Clone ${_src} to ${_dst}?"
  if failed $? ; then $failure ; fi

  ${sys_vm_vbox_mgr} clonevm "${_src}" --name ${_dst} --register --mode all
}

function sys/vm/vbox/info() {
  local _vm="${1}"
  if empty "${_vm}" ; then $failure ; fi

  ${sys_vm_vbox_mgr} showvminfo "${_vm}"
}

function sys/vm/vbox/load() {
  local _vm="${1}"
  if empty "${_vm}" ; then $failure ; fi

  ${sys_vm_vbox_mgr} metrics query "${_vm}" CPU/Load/User,RAM/Usage/Used
}

function sys/vm/vbox/rm() {
  local _vm="${1}"
  if empty "${_vm}" ; then $failure ; fi

  answer "Delete ${_vm}?"
  if failed $? ; then $failure ; fi

  answer "Are you sure?"
  if failed $? ; then $failure ; fi

  ${sys_vm_vbox_mgr} unregistervm "${_vm}" --delete
}

function sys/vm/vbox/ip() {
  local _vm="${1}"
  local _n=${2:-0}
  if empty "${_vm}" ; then $failure ; fi
  import sys/vm/vbox/guest
  sys/vm/vbox/guest/ip "${_vm}" ${_n}
}

function sys/vm/vbox/mac() {
  local _vm="${1}"
  local _n=${2:-0}
  if empty "${_vm}" ; then $failure ; fi
  import sys/vm/vbox/guest
  sys/vm/vbox/guest/mac "${_vm}" ${_n}
}

function sys/vm/vbox/query() {
  local _vm="${1}"
  local _q=${*}
  if empty "${_vm}" ; then $failure ; fi
  import sys/vm/vbox/guest
  sys/vm/vbox/guest/get "${_vm}" ${_q}
}
