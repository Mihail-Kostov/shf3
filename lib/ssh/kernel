function ssh/help() {
  cat << EOF
SSH module
 - key management
 - ssh login
 - scp copy
 - sshfs fuse mount
EOF
}

function ssh/key() {
  local _h="${1:-default}"
  local _s="${2:-${ssh_key_sec}}"
  echo "${ssh_key_dir}/${_h}.${_s}"
}

function ssh/key/sec() {
  ssh/key "${1:-default}" "${ssh_key_sec}"
}

function ssh/key/pub() {
  ssh/key "${1:-default}" "${ssh_key_pub}"
}

function ssh/key/gen() {
  import sys/dir
  import sys/lnk

  local _h="${1:-default}"
  local _t="${2:-${ssh_key_typ}}"
  local _l="${3:-${ssh_key_len}}"

  sys/mid "${_h}"

  # in ${ssh_key_dir}
  sys/dir/svwd "${ssh_key_dir}"

  local _sec="${_h}.id_${_t}"
  local _sec_lnk="${_h}.${ssh_key_sec}"
  local _pub="${_sec}.pub"
  local _pub_lnk="${_h}.${ssh_key_pub}"

  # check
  local i
  for i in ${_sec} ${_sec_lnk} ${_pub} ${_pub_lnk} ; do
    if test -r "${i}" ; then
      msg "Delete key ${i}"
      sys/dir/ldwd
      return ${_false_}
    fi
  done

  # generate
  if ${gdbg} ; then
    ${ssh_keygen} -v -b ${_l} -t "${_t}" -f "${_sec}"
  else
    ${ssh_keygen} -b ${_l} -t "${_t}" -f "${_sec}"
  fi
  if test $? -gt 0 ; then
    sys/dir/ldwd
    return ${_false_}
  fi

  # secure
  chmod go-rwx "${_sec}"
  sys/lnk/mk "${_sec}" "${_sec_lnk}"

  chmod go-rwx "${_pub}"
  sys/lnk/mk "${_pub}" "${_pub_lnk}"

  sys/dir/ldwd
}


function ssh/key/chg() {
  local _h="${1:-default}"
  local _t="${2:-${ssh_key_typ}}"

  sys/mid "${_h}"

  # in ${ssh_key_dir}
  sys/dir/svwd "${ssh_key_dir}"

  local _sec="${_h}.id_${_t}"
  if ! test -r "${_sec}" ; then
    sys/dir/ldwd
    return ${_false_}
  fi
  if ${gdbg} ; then
    ${ssh_keygen} -v -p -f "${_sec}"
  else
    ${ssh_keygen} -p -f "${_sec}"
  fi
  local _ret=$?
  sys/dir/ldwd
  return ${_ret}
}


function ssh/info() {
  import sys
  import gui
  local _h="${1:-default}"

  sys/mid "${_h}"

  echo ""
  msg "SSH Host info ${_h} (${mid_ssh_fqdn})"
  gui/line 84
  echo "URL        : ${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_port}"
  echo "SSH Opts   : ${mid_ssh_ssh_opts}"
  echo "SCP Opts   : ${mid_ssh_scp_opts}"
  echo "SSH Env    : ${mid_ssh_env}"
  echo "SSH Proxy  : ${mid_ssh_proxy}"
  gui/line 84
  echo "SCP Dest   : ${mid_ssh_scp_dst}"
  echo "SCP Src    : ${mid_ssh_scp_src}"
  gui/line 84
  echo "SSHFS Mnt  : ${mid_ssh_sshfs_src} -> ${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_sshfs_dst}"
  echo "SSHFS Opts : ${mid_ssh_sshfs_opts}"
  gui/line 84
  local _sec="$(ssh/key/sec ${_h})"
  if test -r "${_sec}" ; then
    ${ssh_keygen} -v -l -f "${_sec}"
  else
    warn "Key not found ${_sec}"
  fi
  gui/line 84
  local _lck="${_h}.${gbn}"

  return ${_true_}
}


function ssh/login/help() {
  cat << EOF
Logins to <HOST>

\$1 CHARACTER(*) <HOST>
\$2 LOGICAL - force login
EOF
}

function ssh/login() {
  import gui
  import sys
  import sys/lck
  local _h="${1:-default}"
  local _f="${2:-false}"

  # init
  sys/mid "${_h}"

  # clear lock
  local _lck="${_h}.${gbn}"
  if ${_f} ; then
    sys/lck/rm "${_lck}"
  fi

  # opts
  local _opts="${mid_ssh_opts}"

  # proxy
  local _proxy=false
  if ! test -z "${mid_ssh_proxy}" ; then
    if sys/lck/mk "${_lck}" ; then
      _proxy=true
      _opts="${_opts} ${mid_ssh_proxy}"
      msg "Connect proxies: ${mid_ssh_proxy}"
    else
      warn "Active proxies: ${mid_ssh_proxy}"
    fi
  fi

  # key
  local _sec="$(ssh/key/sec ${_h})"
  if test -r "${_sec}" ; then
    _opts="${_opts} -i ${_sec}"
  else
    warn "Key not found ${_sec}"
  fi

  # ssh
  local _url="${mid_ssh_user}@${mid_ssh_fqdn}"
  msg "Login to ${_url}"
  gui/line 84
  local _cmd="${mid_ssh_ssh} ${_opts} ${_url}"
  msg/debug "${_cmd}"
  ${_cmd}
  local _ret=$?

  # clear lock
  if ${_proxy} ; then
    sys/lck/rm "${_lck}"
  fi
  return ${_ret}
}


function ssh/xfer/help() {
  cat << EOF
SSH transfer

\$1 CHARACTER(*) host
\$2 INTEGER      mode
\$3 LOGICAL      recursive
\$4 CHARACTER(*) source
\$5 CHARACTER(*) destination

mode:
     scp  tar/ssh  rsync/ssh
put    1        2          3
get   11       12         13
EOF
}
function ssh/xfer() {
  local _h="${1:-default}"
  # mode number
  local _m="${2:-1}"
  # recursive
  local _r=${3:-false}
  local _src="${4}"
  local _dst="${5:-./}"

  local _put=true
  local _mode=$((_m%10))
  if test $((_m/10)) -gt 0 ; then
    _put=false
  fi

  # init
  sys/mid "${_h}"

  # source
  local _src_url="${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_scp_dst}"

  if ${_put} ; then
    if ! test -r "${_src}" ; then
      msg "Not found ${_src}"
      return ${_false_}
    fi
  else
    _src_url="${_src_url}/${_src}"
  fi

  # select mode
  case ${_mode} in
    1)
      local _opts="${mis_ssh_scp_opts}"
      local _url="${_src_url}"
      local _mtxt="scp"
      if ${_r} ; then
        _opts="-r ${_opts}"
      fi
    ;;
    2)
      local _opts="-p ${mid_ssh_port}"
      local _url="${mid_ssh_user}@${mid_ssh_fqdn}"
      local _mtxt="tar/ssh"
    ;;
    3)
      local _opts="-p ${mid_ssh_port}"
      local _url="${_src_url}"
      local _mtxt="rsync/ssh"
    ;;
    *) sp_f_err "Invalid mode"
       return ${_false_}
    ;;
  esac

  # key
  local _sec="$(ssh/key/sec ${_h})"
  if test -r "${_sec}" ; then
    _opts="${_opts} -i ${_sec}"
  else
    warn "Key not found ${_sec}"
  fi

  # info
  local _dtxt="\n From: ${_src}\n   To: ${_url}"
  if ! ${_put} ; then
    _dtxt="\n From: ${_src_url}\n   To: ${_dst} ($(pwd ${_dst}))"
  fi
  echo "Transfer (${_mtxt})\n${_dtxt}\n"
  gui/line 84

  answer "Start transfer?"
  if test $? -gt 0 ; then 
    return ${_false_};
  fi
  gui/line 84

  local _cmd=""
  # xfer
  case ${_mode} in
    1)
      if ${_put} ; then
        _cmd="${ssh_scp} ${_opts} \"${_src}\" ${_url}"
      else
        _cmd="${ssh_scp} ${_opts} ${_url} \"${_dst}\""
      fi
    ;;
    2)
      if ${_put} ; then
        _cmd="${ssh_tar} cvf - \"${_src}\" | ${ssh_ssh} ${_opts} ${_url} (cd \"${mid_ssh_scp_dst}\";tar xvf -)"
      else
        _cmd="${ssh_ssh} ${_opts} ${_url} (cd \"${mid_ssh_scp_dst}\";tar cvf - \"${_src}\") | (cd \"${_dst}\"; ${ssh_tar} xvf -)"
      fi
    ;;
    3)
      if ${_put} ; then
        _cmd="${ssh_rsync} -a -z -v --partial --progress -e \"${ssh_ssh} ${_opts}\" \"${_src}\" ${_url}"
      else
        _cmd="${ssh_rsync} -a -z -v --partial --progress -e \"${ssh_ssh} ${_opts}\" ${_url} \"${_dst}\""
      fi
    ;;
  esac
  msg/debug "${_cmd}"
  ${_cmd}
}

function ssh/put() {
  local _h="${1:-default}"
  local _m="${2:-1}"
  local _s="${3}"
  local _r=${4:-false}
  _m=$((_m%10))
  ssh/xfer "${_h}" ${_m} ${_r} "${_s}"
}

function ssh/get() {
  local _h="${1:-default}"
  local _m="${2:-1}"
  local _s="${3}"
  local _r=${4:-false}
  _m=$((_m%10+10))
  ssh/xfer "${_h}" ${_m} ${_r} "${_s}"
}


function ssh/cmd/help() {
  cat << EOF
\$1 CHARACTER(*) mid
\$2 CHARACTER(*) "command"
\$3 LOGICAL force tty
EOF
}
function ssh/cmd() {
  local _h="${1:-default}"
  local _x="${2:-ls -lA ${mid_ssh_scp_dst}}"
  local _t=${3:-false}

  sys/mid "${_h}"

  local _opts="${mid_ssh_opts}"
  # force tty
  if ${_t} ; then
    _opts="-t ${_opts}"
  fi

  # key
  local _sec="$(ssh/key/sec ${_h})"
  if test -r "${_sec}" ; then
    _opts="${_opts} -i ${_sec}"
  else
    warn "Key not found ${_sec}"
  fi

  local _url="${mid_ssh_user}@${mid_ssh_fqdn}"
  msg "Run ${_x} on ${_url}"
  gui/line 84

  # ssh
  if ! test -z "${mid_ssh_env}" ; then
    _x="source \${HOME}/${mid_ssh_env};echo;${_x}"
  fi
  local _cmd="${ssh_ssh} ${_opts} ${_url} \"${_x}\""
  ${_cmd}
}


function ssh/mnt/ls() {
  import gui
  msg "Mounted SSHFS Volumes"
  gui/line 84
  mount | egrep 'fusefs|fuse.sshfs' | \
          egrep -v 'encfs|fuse.encfs' | \
          egrep ${USER} | \
          awk '{printf "%-32s => %s\n",$3,$1}'
  return ${_true_}
}


function ssh/mnt() {
  import gui
  import sys/lck
  import sys/dir

  local _h="${1:-default}"
  local _f="${2:-false}"
  local _u="${3:-false}"
  local _ret

  sys/mid "${_h}"

  # lock
  # clear lock
  local _lck="${_h}.${gbn}"
  if ${_f} ; then
    sys/lck/rm "${_lck}"
  fi

  local _src="${mid_ssh_sshfs_src}"

  if ${_u} ; then
    # unmount
    if ! $(sys/lck "${_lck}") && ! ${_f}; then
      msg "${_h} is not mounted"
      return ${_false_}
    fi
    gui/line 84
    ${ssh_umnt} ${_src} 2>/dev/null
    _ret=$?
    if ! test ${_ret} -gt 0 ; then
      sys/lck/rm "${_lck}"
      msg "${_h} is unmounted"
    fi
    return ${_ret}
  fi

  # mount
  if $(sys/lck "${_lck}") && ! ${_f} ; then
    msg "${_h} is already mounted"
    return ${_false_}
  fi

  sys/lck/mk "${_lck}"

  local _opts="${mid_ssh_sshfs_opts}"
  # key
  local _sec="$(ssh/key/sec ${_h})"
  if test -r "${_sec}" ; then
    _opts="${_opts} -i ${_sec}"
  else
    warn "Key not found ${_sec}"
  fi

  local _url="${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_sshfs_dst}"
  sys/dir/mk "${_src}"

  msg $(printf "%-32s => %s" "${_dst}" "${_url}")

  if sys/osx ; then
    local _vol="${_h}:${mid_ssh_user}@${mid_ssh_fqdn}"
    _opts="${_opts} -o volname=${_vol}"
    local _ico="${sys_img_dir}/sshfs.icns"
    if test -r "${_ico}" ; then
      _opts="${_opts} -o modules=volicon -o volicon=${_ico}"
    fi
  fi

  local _cmd="${ssh_mnt} ${_url} \"${_src}\" ${_opts}"
  msg/debug "${_cmd}"

  if ${gdbg} ; then
    ${_cmd}
  else
    ${_cmd} 2>/dev/null
  fi
  _ret=$?
  if test $? -gt 0 ; then
    msg "mount failed"
    sys/lck/rm "${_lck}"
  else
    msg "host mounted"
  fi
  return ${_ret}
}

function ssh/umnt() {
  local _h="${1:-default}"
  local _f="${2:-false}"
  ssh/mnt "${_h}" ${_f} false
}
