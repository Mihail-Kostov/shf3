function sys/net/ubuntu/ifconfig() {
  local _cmd="${1}"
  shift
  case "${_cmd}" in
    ether)
      u/sudo ${sys_net_ubuntu_ifconfig} $* | \
      awk '/HWaddr/{print $5}'
    ;;
    ip4)
      u/sudo ${sys_net_ubuntu_ifconfig} $* | \
      awk '/inet addr/{print $2}' | \
      sed s/addr://
    ;;
  esac
}

function sys/net/ubuntu/stat() {
  local _cmd="${1}"
  shift
  u/sudo ${sys_net_ubuntu_netstat} -tupane | awk '{if(NR>1) print}'
  echo ""
  u/sudo ${sys_net_ubuntu_ufw} status numbered
}

function sys/net/ubuntu/allow() {
  # in  format: $_port[/${_proto:-tcp}] $_addr[/${_mask:-32}]
  # out format: sudo ufw allow proto $_proto from $_addr/$_mask to any port $_port

  local _port="${1}"
  local _addr="${2}"
  local _proto=""
  local _mask=""

  if empty "${_port}" ; then
    msg "Destination port not set"
    $failure
  fi

  if empty "${_addr}" ; then
    msg "Source address not set"
    $failure
  fi

  # defaults
  _proto=$(u/split "${_port}" 2 "/")
  _port=$(u/split "${_port}" 1 "/")
  if test "${_port}" = "${_proto}" ; then
    _proto="tcp"
  fi

  _mask=$(u/split "${_addr}" 2 "/")
  _addr=$(u/split "${_addr}" 1 "/")
  if test "${_addr}" = "${_mask}" ; then
    _mask=32
  fi

  msg "ALLOW to ${_port}/${_proto} from ${_addr}/${_mask}"
  answer "Enable new rule?"
  if failed $? ; then
    $failure
  fi
  u/sudo ${sys_net_ubuntu_ufw} allow proto ${_proto} from ${_addr}/${_mask} to any port ${_port}
}

function sys/net/ubuntu/deny() {
  local _n="${1}"
  if empty "${_n}" ; then
    msg "Rule number not set"
    $failure
  fi

  u/sudo ${sys_net_ubuntu_ufw} status numbered
  answer "Delete rule ${_n}?"
  if failed $? ; then
    $failure
  fi

  u/sudo ${sys_net_ubuntu_ufw} delete ${_n}
}
