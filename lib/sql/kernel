
function help/sql/init() {
  cat <<EOF
\$1 CHARACTER(*) database
\$2 CHARACTER(*) initfile
EOF
}
function sql/init() {
  local _db="${1:-./tmp.sqlite}"
  local _in="${2}"

  msg/debug "Creating new database: ${_db} ${_in}"
  if ! test -r "${_db}" ; then
    touch "${_db}"
    chmod 600 "${_db}"
    local _r=$?
    if ! test -r "${_in}" ; then
      return ${_r}
    fi
    ${sql_sqlite} "${_db}" < "${_in}"
    _r=$?
    return ${_r}
  fi
  warn "Database exists: ${_db}"
  return ${_false_}
}

function sql/count() {
  local _db="${1}"
  local _tb="${2}"
  if ! readable "${_db}" ; then
    $failure
  fi
  ${sql_sqlite} "${_db}" "SELECT COUNT(*) FROM ${_tb}"
}

function help/sql/select() {
  cat <<EOF
\$1 CHARACTER(*) database
\$2 CHARACTER(*) table
\$3 CHARACTER(*) fields (*)
\$4 INTEGER      offset
\$5 INTEGER      limit
\$6 CHARACTER(*) where
EOF
}
function sql/select() {
  local _db="${1}"
  local _tb="${2}"
  local _f=${3:-*}
  local _o=${4:-0}
  local _l=${5:-0}
  local _w=${6}
  local _q="SELECT ${_f} FROM ${_tb}"

  if ! test -z "${_w}" ; then
    _q="${_q} WHERE ${_w}"
  fi

  if test ${_o} -gt 0 ; then
    _q="${_q} OFFSET ${_o}"
  fi

  if test ${_l} -gt 0 ; then
    _q="${_q} LIMIT ${_l}"
  fi

  ${sql_sqlite} "${_db}" "${_q}"
}

function sql/selectby() {
  local _by="${1}"
  local _db="${2}"
  local _tb="${3}"
  local _f=${4:-*}
  local _o=${5:-0}
  local _l=${6:-0}
  local _w=${7}

  if empty "${_by}" ; then $failure; fi

  local _q="SELECT ${_f} FROM ${_tb}"

  if ! test -z "${_w}" ; then
    _q="${_q} WHERE ${_w}"
  fi

  if test ${_o} -gt 0 ; then
    _q="${_q} OFFSET ${_o}"
  fi

  if test ${_l} -gt 0 ; then
    _q="${_q} LIMIT ${_l}"
  fi

  _q="${_q} ORDER BY ${_by}"
  ${sql_sqlite} "${_db}" "${_q}"
}

function sql/insert() {
  local _db="${1}"
  local _tb="${2}"
  local _f=(${3})
  local _v=(${4})
  local _q="INSERT INTO ${_tb}"
  local _qf="("
  local _qv="VALUES ("
  local _first=true
  local i
  for i in ${_f[@]} ; do
    if ! ${_first} ; then
      _qf="${_qf},${i}"
    else
      _qf="${_qf}${i}"
      _first=false
    fi
  done
  _qf="${_qf})"

  _first=true
  for i in ${_v[@]} ; do
    if ! ${_first} ; then
      _qv="${_qv},'${i}'"
    else
      _qv="${_qv}'${i}'"
      _first=false
    fi
  done
  _qv="${_qv})"
  _q="${_q} ${_qf} ${_qv}"
  ${sql_sqlite} "${_db}" "${_q}"
}

function sql/update() {
  local _db="${1}"
  local _tb="${2}"
  local _f=(${3})
  local _v=(${4})
  local _w="${5}"
  local _q="UPDATE ${_tb}"
  local _qf="SET "
  local _first=true

  if test -z "${_w}" ; then
    return ${_false_}
  fi
  local j=0
  local i
  for i in ${_f[@]} ; do
    if ! ${_first} ; then
      _qf="${_qf},${i}='${_v[${j}]}'"
    else
      _qf="${_qf}${i}='${_v[${j}]}'"
      _first=false
    fi
    j=$((j+1))
  done
  _qf="${_qf}"

  _q="${_q} ${_qf} WHERE ${_w}"
  ${sql_sqlite} "${_db}" "${_q}"
}

function sql/delete() {
  local _db="${1}"
  local _tb="${2}"
  local _w="${3}"
  local _q="DELETE FROM ${_tb}"

  if test -z "${_w}" ; then
    return ${_false_}
  fi

  _q="${_q} WHERE ${_w}"
  ${sql_sqlite} "${_db}" "${_q}"
}

function sql/vacuum() {
  local _db="${1}"
  if empty "${_db}" ; then
    $failure
  fi

  if ! readable "${_db}" ; then
    msg "Database not found: ${_db}"
    $failure
  fi

  _q="VACUUM"
  ${sql_sqlite} "${_db}" "${_q}"
}
