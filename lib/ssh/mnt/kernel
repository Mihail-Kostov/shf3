
function ssh/mnt/ls() {
  import gui

  printf "%-32s %s\n" "Local directory" "Remote url"
  gui/line
  mount | egrep 'fusefs|fuse.sshfs|fuse4x' | \
          egrep -v 'encfs|fuse.encfs' | \
          egrep -v 'TrueCrypt' | \
          egrep ${USER} | \
          awk -v h=${HOME} '{
            sub(h,"$HOME",$3);
            printf "%-32s %s\n",$3,$1
          }'
  return ${_true_}
}


function ssh/mnt/kill() {
  import gui

  local _h="${1}"
  local _s=${2:-9}

  if test -z "${_h}" ; then
    return ${_false_}
  fi

  local _pid=$(ps aux | \
    grep $USER | \
    grep sshfs | \
    grep ${_h} | \
    grep -v grep | \
    awk '{print $2}')

  if test -z "${_pid}" ; then
    msg "Process not found"
    return ${_false_}
  fi

  msg
  gui/line
  ps ${_p}
  answer "Kill process?"
  if test $? -gt 0 ; then
    return ${_false_}
  fi
  kill -${_s} ${_p}
}

function ssh/sumnt() {
  import sys
  import sys/lck
  local _h="${1:-default}"

  sys/mid "ssh/${_h}"
  if test $? -gt 0 ; then
    return ${_false_}
  fi

  local _src="${ssh_mnt_dir}/${_h}"

  answer "Unmount by root ${_h}?"
  if test $? -gt 0 ; then
    return ${_false_}
  fi
  sudo umount -l ${_src}

  # clear lock
  local _lck="${_h}.${gbn}"
  sys/lck/rm "${_lck}"
}

function ssh/mnt() {
  import sys
  import gui
  import sys/lck
  import sys/dir
  import ssh
  import ssh/key

  local _mid="${1:-default}"
  local _hop=""
  local _f="${2:-false}"
  local _u="${3:-false}"
  local _ret

  # hoping
  local _hoping=false
  if ssh/ishop "${_mid}" ; then
    _hoping=true
  fi
  if ${_hoping} ; then
    _hop=$(field "${_mid}" 1 "/")
    _mid=$(field "${_mid}" 2 "/")
  fi

  sys/mid "ssh/${_mid}"
  if failed $? ; then $failure ; fi

  # hoping
  if ! ${_u} ; then
    if ${_hoping} ; then
      import ssh/hop
      local _hop_cmd=""
      ssh/hop "${_hop}"
    fi
    # connection check
    ssh/conchk "${_hop}"
    if failed $? ; then $failure; fi

    # reinit hoping endpoint
    sys/mid "ssh/${_mid}"
  fi

  # lock
  # clear lock
  local _lck="${_mid}.${gbn}"
  if ${_f} ; then
    sys/lck/rm "${_lck}"
  fi

  local _src="${ssh_mnt_dir}/${_mid}"

  # unmount
  if ${_u} ; then
    if ! ${_f} ; then
      if ! test -r "${_src}" ; then
        return ${_false_}
      fi
    fi
    if ! $(sys/lck "${_lck}") && ! ${_f}; then
      msg "Not mounted: ${_mid}"
      return ${_false_}
    fi

    msg "Mount directory : ${_src}"
    answer "Unmount ${_mid}?"
    if test $? -gt 0 ; then
      return ${_false_}
    fi

    if ${_f} ; then
      local _opt="-f"
    fi
    ${ssh_mnt_umnt} ${_opt} ${_src} 2>/dev/null
    _ret=$?
    if ! test ${_ret} -gt 0 ; then
      if test "${mid_ssh_type}" = "gsi" ; then
        import ssh/gsi
        ssh/gsi/destroy "${X509_USER_PROXY}"
      fi
      sys/lck/rm "${_lck}"
      msg "Unmount success"
    fi
    return ${_ret}
  fi

  # mount
  if $(sys/lck "${_lck}") && ! ${_f} ; then
    msg "Mounted: ${_mid}"
    return ${_false_}
  fi

  ssh/fqdn "${_mid}" "${mid_ssh_fqdn}"
  local _fqdn="${mid_ssh_fqdn}"
  if ${_hoping} ; then
    if test "${_hop}" = "tor" ; then
      _fqdn="${mid_tor_fqdn}"
    fi
  fi

  local _url="${mid_ssh_user}@${_fqdn}:${mid_ssh_sshfs_dst}"

  msg "Source : ${_url}"
  msg "Target : ${_src}"

  answer "Mount ${_mid}?"
  if test $? -gt 0 ; then
    return ${_false_}
  fi
  sys/lck/mk "${_lck}"

  local _opt="${mid_ssh_sshfs_opt}"

  if test "${mid_ssh_type}" = "gsi" ; then
    # gsi
    import ssh/gsi
    ssh/gsi/init "${_mid}"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    _opt="${_opt} -o ssh_command=$(which gsissh)"
    gui/line
  else
    # ssh
    local _sec="$(ssh/key/sec ${_mid})"
    if test -r "${_sec}" ; then
      _opt="${_opt} -o IdentityFile=${_sec}"
    else
      msg "Key not found ${_sec}"
    fi
  fi

  sys/dir/mk "${_src}"

  # https://code.google.com/p/macfuse/wiki/OPTIONS
  if test "$(sys/os)" = "osx" ; then
#    local _vol="sshfs/${_mid}:${mid_ssh_user}@${_fqdn}"
    local _vol="sshfs/${_mid}"
    _opt="${_opt} -o volname=${_vol} -o fsname=${_vol}"
    local _ico="${sys_img_dir}/sshfs.icns"
    if test -r "${_ico}" ; then
      _opt="${_opt} -o modules=volicon -o volicon=${_ico}"
    fi
  fi

  if ${_hoping} ; then
    _opt="${_opt} -o CheckHostIP=no"
    _opt="${_opt} -o ProxyCommand='${_hop_cmd}'"
  fi

  local _cmd="${ssh_mnt_mnt} ${_url} \"${_src}\" ${_opt}"
  msg/debug "${_cmd}"

  if ${gdbg} ; then
    eval ${_cmd}
  else
    eval ${_cmd} 2>/dev/null
  fi
  _ret=$?
  if test ${_ret} -gt 0 ; then
    msg "Mount failed"
    sys/lck/rm "${_lck}"

    # grid proxy destroy
    if test "${mid_ssh_type}" = "gsi" ; then
      ssh/gsi/destroy
    fi
  else
    msg "Mount success"
  fi
  return ${_ret}
}

function ssh/umnt() {
  local _mid="${1:-default}"
  local _f="${2:-false}"
  ssh/mnt "${_mid}" ${_f} true
}
