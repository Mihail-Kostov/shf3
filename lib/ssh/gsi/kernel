
function ssh/gsi/init() {
  import gui
  import sys
  import sys/lck
  import ssh/key
  import ssh/key/crt

  local _h="${1}"
  local _x_lck="${2:-${sys_lck_dir}/${gbn}.gsi.$$}"
  if test -z "${_h}" ; then
    return ${_false_}
  fi

  sys/mid "ssh/${_h}"
  local _sec="$(ssh/key/sec ${_h})"
  local _crt="$(ssh/key/crt ${_h})"

  # check
  if ! test -r "${_sec}" ; then
    msg "Key not found"
    return ${_false_}
  fi
  if ! test -r "${_crt}" ; then
    msg "Certificate not found"
    return ${_false_}
  fi

  # grid proxy init
  msg "Initialize Grid Proxy"
  gui/line
  local _x_opt=""

  # timeout
  if ! test -z "${mid_ssh_valid}" ; then
    _x_opt="-valid ${mid_ssh_valid}"
  fi

  # keys
  _x_opt="${_x_opt} -key ${_sec}"
  _x_opt="${_x_opt} -cert ${_crt}"
  _x_opt="${_x_opt} -out ${_x_lck}"

  if ! test -z "${mid_ssh_grid}" ; then
    local _crt_dir="${ssh_key_crt_dir}/${mid_ssh_grid}"
    if ! test -d "${_crt_dir}" ; then
      msg "Gird certificate not found"
      return ${_false_}
    fi
    _x_opt="${_x_opt} -certdir ${_crt_dir}"
    export X509_CERT_DIR="${_crt_dir}"
  fi

  # debug
  if ${gdbg} ; then
    _x_opt="-debug ${_x_opt}"
  fi

  ${ssh_gsi_init} ${_x_opt}
  if test $? -gt 0 ; then
    msg "Grid Proxy failed"
    return ${_false_}
  fi
  export X509_USER_PROXY="${_x_lck}"
}

function ssh/gsi/destroy() {
  local _x_lck="${1:-${sys_lck_dir}/${gbn}.gsi.$$}"
  if ${gdbd} ; then
    _x_opt="-debug"
  fi
  if test -r "${_x_lck}" ; then
    ${ssh_gsi_destroy} ${_x_opt} "${_x_lck}"
  else
    msg "Grid Proxy Failed"
  fi
  unset X509_USER_PROXY
  unset X509_CERT_DIR
  msg "Grid Proxy destroyed"
}

function ssh/gsi/pkcs12() {
  import sys
  import sys/dir
  local _h="${1:-default}"

  sys/mid "ssh/${_h}"
  if failed $? ; then
    msg "MID not found: ${_h}"
    $failure
  fi

  local _sec="$(ssh/key/sec ${_h})"
  local _crt="$(ssh/key/crt ${_h})"
  local _p12="$(ssh/key/p12 ${_h})"
  _sec=$(basename "${_sec}")
  _crt=$(basename "${_crt}")
  _p12=$(basename "${_p12}")

  # in ${ssh_key_dir}
  sys/dir/svwd "${ssh_key_dir}"

  # check
  if ! readable "${_sec}" ; then
    msg "Key not found"
    $failure
  fi
  if ! readable "${_crt}" ; then
    msg "Certificate not found"
    $failure
  fi
  if readable "${_p12}" ; then
    msg "Found PKCS12 key"
    $failure
  fi

  ${ssh_gsi_openssl} pkcs12 -export -in "${_crt}" -inkey "${_sec}" -out "${_p12}"
  if readable "${_p12}" ; then
    chmod 600 "${_p12}"
  fi
}
