
function run/mail() {
  local _sub="${1:-${FUNCNAME}}"
  local _sch="${2}"
  local _msg=""

  if test -z "${_sub}" || 
     test -z "${QMAILTO}" ; then
    return ${_false_}
  fi

  if ! test -z "${_sch}" ; then
    import que/${_sch}
    _sub="$(que/mail/sub) ${_sub}"
    _msg=$(que/mail/msg)
  fi

  # send mail
  import net/mail
  net/mail "${QMAILTO}" "${_sub}" "${_msg}"
}


function run/clean() {
  import gui
  import sys/dir
  import sys/lnk

  # header
  msg "${FUNCNAME}: $(date)"
  gui/line

  if test -z "${INPUTDIR}" || \
   ! test -d "${INPUTDIR}" ; then
    msg "Not found: ${INPUTDIR}"
    return ${_false_}
  fi

  # enter input dir
  local _idir="${INPUTDIR}"
  sys/dir/svwd "${_idir}"

  # workdir
  local i
  for i in "${WORKDIR}" ; do
    if ! test -z "${i}" && \
         test -d "${i}" ; then
      local _dir=$(ns/op/name "${i}" "@")
      sys/dir/rm "${_dir}"
    fi
  done

  # stage dir
  for i in "${STAGEDIR}" ; do
    if ! test -z "${i}" && \
         test -d "${i}" ; then
      sys/dir/rm "${i}"
    fi
  done
  # TODO link
  sys/lnk/rm "${WORKDIRLINK}"
  return ${_true_}
}


function help/run/prg() {
  cat << EOF
Program run wrapper

\$1 - check level
\$2 - program
\$3 - guide file
\$4 - scheduler
EOF
}

function run/prg() {
  import sys/dir
  import sys/lnk
  import run/chk
  import gui

  local _chk=${1:-0}
  local _prg=${2}
  local _guide=${3}
  local _sch=${4}

  ### check
  run/chk ${_chk} "${_prg}" "${_guide}"
  if test $? -gt 0 ; then
    return ${_false_}
  fi

  ### import
  # program
  import run/${_prg}

  # read guide
  source "${_guide}"

  # scheduler
  if ! test -z "${_sch}" ; then
    import que/${_sch}
  fi

  ### begin run
  # enter inputdir
  sys/dir/svwd "${INPUTDIR}"

  # create workdir
  local _wdir=$(ns/op/name "${WORKDIR}" "@")
  if ! $(sys/dir/mk "${_wdir}") ; then
    return ${_false_}
  fi

  # create resultdir
  local _rdir="${RESULTDIR}"
  if ! $(sys/dir/mk "${_rdir}") ; then
    run/clean
    return ${_false_}
  fi

  # tempdir
  # TODO: frm spec
  local _tdir="${_prg}-${USER}-${HOSTNAME}-${$}"

  ### broadcast
  # create stagedir for broadcast
  if $(ns/isop "${WORKDIR}" "@" ) ; then
    local _sdir="${run_stage_dir}/stage-${_tdir}"
    if ! test -z "${STAGEDIR}" ; then
      _sdir="${STAGEDIR}"
    else
      STAGEDIR="${_sdir}"
    fi
    if ! $(sys/dir/mk "${_sdir}") ; then
      run/clean
      return ${_false_}
    fi
    msg "Input broadcast"
    msg "Stage : ${_sdir}"
    msg "Check local node scratch for output!"
  fi

  # workdir link
  WORKDIRLINK="${INPUTDIR}/${_prg}-${$}"
  if ! $(ns/isop "${WORKDIR}" "@" ) ; then
    sys/lnk "${_wdir}" "${WORKDIRLINK}"
  fi

  ### program init
  run/${_prg}/init
  local _ret=$?
  if test ${_ret} -gt 0 ; then
    if test "${ONERR}" = "clean" ; then
      run/clean
    fi
    return ${_r}
  fi

  # delete stage dir
  sys/dir/rm "${_sdir}"

  ### program run
  sys/dir/svwd "${_wdir}"

  # list inputs
  msg "Inputs in ${_wdir}"
  gui/line
  ls -lR
  gui/line

  # MPI & options
  local _out=${_prg}.output
  local _cmd="${PRGBIN}"

  if ! test -z "${PRERUN}" ; then
    _cmd="${PRERUN} ${_cmd}"
  fi

  if ! test -z "${PRGOPT}" ; then
    _cmd="${_cmd} ${PRGOPT}"
  fi

  # start program
  run/mail "Program ${_prg} Started"

  msg "Command: ${_cmd}"

  ### lib override
  # Format: colon separated list
  if ! test -z "${LDLIB}" ; then
    if test -z "${LD_LIBRARY_PATH}" ; then
      export LD_LIBRARY_PATH="${LDLIB}"
    else
      export LD_LIBRARY_PATH="${LDLIB}:${LD_LIBRARY_PATH}"
    fi
    msg "LD_LIBRARY_PATH: ${LDLIB}"
  fi

  ### preload override
  # Format: space separated list
  if ! test -z "${LDPRE}" ; then
    if test -z "${LD_PRELOAD}" ; then
      export LD_PRELOAD="${LDPRE}"
    else
      export LD_PRELOAD="${LDPRE} ${LD_PRELOAD}"
    fi
    msg "LD_PRELOAD: ${LDPRE}"
  fi

  local _inp=$(ns/op/name "${MAININPUT}")
  if $(ns/isop "${MAININPUT}" "<") ; then
    ${_cmd} < "${_inp}" &> "${_out}"
  elif $(ns/isop "${MAININPUT}" "-") ; then
    ${_cmd} &> "${_out}"
  else
    ${_cmd} "${_inp}" &> "${_out}"
  fi
  _ret=$?

  # temp save mode
  msg "Temporary directory save mode"
  local _oemsg=" error: not saved   success: saved"
  case "${ONERR}" in 
    "clean") _oemsg=" error: cleaned     success: saved";;
    "save")  _oemsg=" error: saved       success: saved";;
    "leave") _oemsg=" error: not saved   success: not saved";;
  esac
  msg "${_oemsg}"

  ### list output
  msg "Outputs in ${_wdir}"
  gui/line
  ls -lR
  gui/line

  ### exit status
  if test ${_ret} -gt 0 && ! test "${ONERR}" = "save" ; then
    if test "${ONERR}" = "clean" ; then
      run/clean
    fi
    local _emsg="Program ${_prg} Failed (exit code ${_ret})"
    msg "${_emsg}"
    run/mail "${_emsg}"
    return ${_ret}
  fi

  ### finish
  run/${_prg}/finish
  _ret=$?
  if test ${_ret} -gt 0 && ! test "${ONERR}" = "save" ; then
    if test "${ONERR}" = "clean" ; then
      run/clean
    fi
    local _emsg="run/${_prg}/finish Failed (exit code ${_ret})"
    msg "${_emsg}"
    run/mail "${_emsg}"
    return ${_ret}
  fi

  ### save
  ### list output
  msg "Saved outputs in ${_wdir}"
  gui/line
  ls -lR ${RESULTS}
  gui/line

  if test "${ONERR}" != "leave" ; then
    run/${_prg}/save
    _ret=$?
    if test ${_ret} -gt 0 ; then
      if test "${ONERR}" = "clean" ; then
        run/clean
      fi
      local _emsg="run/${_prg}/save Failed (exit  code ${_ret})"
      msg "${_emsg}"
      run/mail "${_emsg}"
      return ${_ret}
    fi
    run/clean
  fi

  local _emsg="Program ${_prg} Complete"
  msg "${_emsg}"
  run/mail "${_emsg}"
}

function run/sum() {
  # options
  local _prg=${1}
  local _guide=${2}

  # read guide
  if ! test -r "${_guide}" ; then
    sp_f_err_fnf "${_guide}"
    return ${_FALSE_}
  fi
  source "${_guide}"

  import run/${_prg}
  run/${_prg}/sum
}


#/// \fn sp_f_run_fsv
#/// \brief save with prefix
#///
#/// \param 1 CHARACTER(*) file
#/// \param 2 CHARACTER(*) prefix
function sp_f_run_fsv() {
  local _rs="${1}"
  local _inp="${2}"
  if ! test -z "${_inp}" ; then
    _inp="${_inp}."
  fi
  local _p_dst="${RESULTDIR}/${_inp}${_rs}${sp_s_z}"
  sp_f_svzmv "${_rs}" "${_p_dst}"
}

#/// \fn sp_f_run_collect
#/// \brief collect results suffix ($2) might ($1) be removed
#///
#/// \param 1 LOGICAL remove suffix?
#/// \param 2 CHARACTER(*) suffix
function sp_f_run_collect() {
  local _inp=""
  local _irs=${1:-true}
  local _sfx="${2}"
  local _r=0
  local _rs=""
  local _p_wdir=$(sp_f_inm "${WORKDIR}" "@")

  if ${_irs} ; then
    _inp=$(sp_f_inm "${MAININPUT}")
    _inp=${_inp%%${_sfx}}
  fi

  cd "${_p_wdir}"

  for _rs in ${RESULTS}; do
    # if test -f "${_rs}" ; then
    if test -r "${_rs}" ; then
      sp_f_run_fsv "${_rs}" "${_inp}"
      _r=$?
      if test ${_r} -gt 0 ; then
        return ${_r}
      fi
    else
      sp_f_wrn "skipped unknown ${_rs}"
    fi
  done

  return ${_TRUE_}
}




#/// \fn sp_f_run_bcast
#/// \brief local or remote boradcast a file
#///
#/// \param 1 LOGICAL broadcast via a stage directory
#/// \param 2 CHARACTER(*) work directory
#/// \param 3 CHARACTER(*) stage directory
#/// \param 4 CHARACTER(*) input file
#/// \param 5 CHARACTER(*) destination file
function sp_f_run_bcast() {
  local _isd=${1}
  local _p_wdir="${2}"
  local _p_sdir="${3}"
  local _p_if="${4}"
  local _dst="${5}"
  local _n_dst=$(sp_f_zbn "${_p_if}")

  if test -d "${_p_if}" ; then
    cp -R "${_p_if}" "${_p_wdir}"
    local __p_if=$(basename ${_p_if})
    sp_f_uzd "${_p_wdir}/${__p_if}"
    return ${_TRUE_}
  elif test -f "${_p_if}" ; then
    if ${_isd} ; then
      sp_f_zcpumv "${_p_if}" "${_p_sdir}" "${_dst}"
      if test -z "${_dst}" ; then
        _dst="${_n_dst}"
      fi
      ${sp_b_qbca} "${_p_sdir}/${_dst}" "${_p_wdir}/${_dst}"
    else
      sp_f_zcpumv "${_p_if}" "${_p_wdir}" "${_dst}"
    fi
  else
    sp_f_err_fnf "${_p_if}"
    return ${_FALSE_}
  fi
  return ${_TRUE_}
}


#/// \fn sp_f_run_check_libs
#/// \brief check input libraries
function sp_f_run_check_libs() {
  local _lib=""
  local __lib=""
  local _p_if=""

  for _lib in ${LIBS}; do
    __lib=$(sp_f_inm "${_lib}" "!")
    _p_if="${LIBDIR}/${__lib}"
    if ! test -f "${_p_if}" ; then
      sp_f_err_fnf "${_p_if}"
      return ${_FALSE_}
    fi
  done
  return ${_TRUE_}
}

#/// \fn sp_f_run_prepare_libs
#/// \brief preapre and broadcast input libraries
#///
#/// \param 1 LOGICAL broadcast via stage directory
#/// \param 2 CHARACTER(*) work directory
#/// \param 3 CHARACTER(*) stage directory
#///
#/// Remark: input libraries are datafiles for the 
#/// program and are not connected with shared os libs
function sp_f_run_prepare_libs() {
  local _isd=${1}
  local _p_wdir="${2}"
  local _p_sdir="${3}"
  local _s_l="${4}"
  local _p_if=""
  local _dst=""
  local _lib=""
  local __lib=""

  for _lib in ${LIBS}; do
    __lib=$(sp_f_inm "${_lib}" "!")
    _p_if="${LIBDIR}/${__lib}"
    if ! test -f "${_p_if}" ; then
      sp_f_err_fnf "${_p_if}"
      return ${_FALSE_}
    fi
    if sp_f_ird "${_lib}" "!" ; then
      _dst=""
    else
      _dst=${__lib%%.*${_s_l##.}*}${_s_l}
      _dst=${_dst##*/}
    fi
    sp_f_run_bcast ${_isd} "${_p_wdir}" "${_p_sdir}" "${_p_if}" "${_dst}"
  done
  return ${_TRUE_}
}

#/// \fn sp_f_run_prepare_others
#/// \brief prepare and broadcast other inputs
#///
#/// \param 1 LOGICAL broadcast via stage directory
#/// \param 2 CHARACTER(*) work directory
#/// \param 3 CHARACTER(*) stage directory
function sp_f_run_prepare_others() {
  local _isd=${1}
  local _p_wdir="${2}"
  local _p_sdir="${3}"
  local _p_if=""
  local _oin=""

  for _oin in ${OTHERINPUTS}; do
    _p_if="${INPUTDIR}/${_oin}"
    # if ! test -f "${_p_if}" ; then
    if ! test -r "${_p_if}" ; then
      sp_f_err_fnf "${_p_if}"
      return ${_FALSE_}
    fi
    sp_f_run_bcast ${_isd} "${_p_wdir}" "${_p_sdir}" "${_p_if}"
  done
  return ${_TRUE_}
}
