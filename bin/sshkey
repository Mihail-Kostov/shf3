#!/bin/bash
source $(dirname ${BASH_SOURCE})/../lib/header
import gui
import ssh/key

function help/sshkey() {
  cat << EOF

SSH key generator

Usage: ${gbn} options
              -n MID - new [-g CNF_URL - grid certificate]
              -c MID - change
              -e MID - export to pkcs12
              -v - verbose

PKCS2:
https://www.tampabaycomputing.com/blog/creating-pkcs12-pfx-from-a-private-key-and-certificate-file-openssl
EOF
  exit ${_false_}
}

### args
_m=""
_c="NEW"
while getopts hvc:n:e:g: o; do
  case "$o" in
    n) _n="NEW"; _m=$OPTARG;;
    c) _c="CHANGE"; _m=$OPTARG;;
    e) _c="PKCS12"; _m=$OPTARG;;
    g) _g=$OPTARG;;
    v) gdbg=true;;
    h|*) help/sshkey;;
  esac
done

### main
echo
msg
gui/line

if test "${_m}" = "" ; then
  echo -n "[${gbn}] Enter MID: "
  read _m
fi

case ${_c} in
  CHANGE)
    answer "Change key for ${_m}?"
    if failed $? ; then exit ${_false_}; fi

    ssh/key/chg "${_m}"
  ;;
  NEW)
    answer "Generate key for ${_m}?"
    if failed $? ; then exit ${_false_}; fi

    if test -z "${_g}" ; then
      ssh/key/gen "${_m}"
      exit $?
    fi
    ssh/key/pem "${_m}" "${_g}"
  ;;
  PKCS12)
    answer "Export pkcs12 key for ${_m}?"
    if failed $? ; then  exit ${_false_}; fi

    import ssh/gsi
    ssh/gsi/pkcs12 "${_m}"
  ;;
esac
