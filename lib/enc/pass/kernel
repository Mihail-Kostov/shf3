
function enc/pass() {
  import sql

  msg/debug "Database: ${enc_pass_db}"
  answer "Create database?"
  if test $? -gt 0 ; then
    return ${_false_}
  fi
  local _in="$(ns/dir ${BASH_SOURCE})/enc_pass.sql"
  sql/init "${enc_pass_db}" "${_in}"
}

function enc/pass/gen() {
  import rnd/net
  import enc/gpg

  local _l=${1:-12}
  local _p=$(rnd/net/str ${_l} false)
  if test "${_p}" = "" ; then
    return ${_false_}
  fi
  _p=$(enc/gpg/enc "${_p}")
  if test "${_p}" = "Cg==" ; then
    return ${_false_}
  fi
  echo "${_p}"
  return ${_true_}
}

function enc/pass/pass() {
  import sql
  import enc/gpg

  local _u="${1}"

  if test -z "${_u}" ; then
    return ${_false_}
  fi
  local _p=$(sql/select "${enc_pass_db}" "${enc_pass_tb}" "pass" 0 1 "uid='${_u}'")
  if test "${_p}" = "" ; then
    return ${_false_}
  fi
  _p=$(enc/gpg/dec "${_p}")
  if test "${_p}" = "" ; then
    return ${_false_}
  fi
  echo "${_p}"
  return ${_true_}
}

function enc/pass/mgr() {
  import sql
  import gui
  import rnd/net

  local _m="${1:-LIST}"
  local _l=${2:-42}
  local _u="${3}"
  local _q=""

  if ! test -r "${enc_pass_db}" ; then
    enc/pass
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    return ${_true_}
  fi
  # TODO: toupper
  case "${_m}" in
    LIST)
      local _c=$(sql/count "${enc_pass_db}" "${enc_pass_tb}")
      if test ${_c} -lt 0 ; then
        return ${_false_}
      fi
      if ! test -z "${_u}" ; then
        answer "Retrieve password for ${_u}?"
        if test $? -gt 0 ; then
          return ${_false_}
        fi
        local _p=$(enc/pass/pass "${_u}")
        if test "${_p}" = ""; then
          msg "User ${_u} is not valid"
          return ${_false_}
        fi
        msg ">>$(gui/pass "${_p}")<<"
        return ${_true_}
      fi
      local _frm1="%-40s%-22s%-22s\n"
      printf "${_frm1}" "uid" "created" "modified"
      gui/line
      local i
      for i in $(sql/select "${enc_pass_db}" "${enc_pass_tb}" "uid,ctime,mtime") ; do
        printf "${_frm1}" $(field "${i}") "$(epoch $(field "${i}" 2))" "$(epoch $(field "${i}" 3))"
      done
      ;;
    CREATE)
      if test -z "${_u}" ; then
        return ${_false_}
      fi
      answer "Create password for ${_u}?"
      if test $? -gt 0 ; then
        return ${_false_}
      fi

      if ! $(rnd/net/test) ; then
        msg "Network failure"
        return ${_false_}
      fi
      local _p=$(enc/pass/gen ${_l})
      if test "${_p}" = "" ; then
        msg "Password generation error"
        return ${_false_}
      fi
      local _date=$(epoch)
      local _f=("uid" "pass" "ctime" "mtime")
      local _v=("${_u}" "${_p}" "${_date}" "${_date}")
      if ${gdbg} ; then
        sql/insert "${enc_pass_db}" "${enc_pass_tb}" "${_f[*]}" "${_v[*]}"
      else
        sql/insert "${enc_pass_db}" "${enc_pass_tb}" "${_f[*]}" "${_v[*]}" 2>/dev/null
      fi
      if test $? -gt 0 ; then
        msg "Insert failed"
        return ${_false_}
      fi
      msg "New password created"
      return ${_true_}
      ;;
    CHANGE)
      if test -z "${_u}" ; then
        return ${_false_}
      fi
      answer "Change password for ${_u}?"
      local _p=$(enc/pass/pass "${_u}")
      if test "${_p}" = ""; then
        msg "User ${_u} is not valid"
        return ${_false_}
      fi

      answer "Create password for ${_u}?"
      if test $? -gt 0 ; then
        return ${_false_}
      fi
      local _p=$(enc/pass/gen ${_l})
      if test "${_p}" = "" ; then
        msg "Password generation error"
        return ${_false_}
      fi
      local _date=$(epoch)
      # TODO: serialize
      local _f=("pass" "mtime")
      local _v=("${_p}" "${_date}")
      sql/update "${enc_pass_db}" "${enc_pass_tb}" "${_f[*]}" "${_v[*]}" "uid='${_u}'"
      if test $? -gt 0 ; then
        msg "Update failed"
        return ${_false_}
      fi
      msg "Password changed"
      return ${_true_}
      ;;
    DELETE)
      if test -z "${_u}" ; then
        return ${_false_}
      fi
      answer "Delete user ${_u}?"
      local _p=$(enc/pass/pass "${_u}")
      if test "${_p}" = ""; then
        msg "User ${_u} is not valid"
        return ${_false_}
      fi

      answer "Delete user ${_u}?"
      if test $? -gt 0 ; then
        return ${_false_}
      fi
      answer "Are you sure?"
      if test $? -gt 0 ; then
        return ${_false_}
      fi
      sql/delete "${enc_pass_db}" "${enc_pass_tb}" "uid='${_u}'"
      if test $? -gt 0 ; then
        msg "Delete failed"
        return ${_false_}
      fi
      msg "User deleted"
      return ${_true_}
      ;;
  esac
}
