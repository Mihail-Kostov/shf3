function help/ssh() {
  cat << EOF
SSH module
 - key management
 - ssh login
 - scp copy
 - sshfs fuse mount
EOF
}

function ssh/fqdn() {
  local _mid="${1}"
  local _fqdn="${2}"
  if empty "${_mid}" || empty "${_fqdn}" ; then
    echo ""
    $failure
  fi
  local _vm=$(u/split "${_fqdn}" 1 "/")
  if test "${_vm}" = "vbox" ; then
    _nic=$(u/split "${_fqdn}" 2 "/")
    import sys/vm/vbox
    _fqdn=$(sys/vm/vbox/ip "${_mid}" ${_nic})
  fi
  mid_ssh_fqdn="${_fqdn}"
}

function ssh/mgr() {
  import sys
  import gui
  local _m="${1:-LIST}"
  local _h="${2}"
  case "${_m}" in
    LIST)
      import ssh/key
      # list format
      local _frm1="%-21s%-6s%-14s%-42s\n"
      echo ""
      # header
      printf "${_frm1}" "MID" "Type" "Cluster" "URL"
      gui/line
      local i
      for i in ${sys_mid_dir}/ssh/* ; do
        mid_ssh_type=""
        if test -r "${i}" ; then
          i=$(basename "${i}")
          sys/mid "ssh/${i}"
          if ! test -z "${mid_ssh_type}" ; then
            printf "${_frm1}" "${i}" "${mid_ssh_type}" \
                   "${mid_ssh_cluster}" "${mid_ssh_user}@${mid_ssh_fqdn}"
          fi
        fi
      done
      echo ""
      ;;
    EDIT)
      local _mid="${sys_mid_dir}/ssh/${_h}"
      if ! test -r "${_mid}" ; then
        msg "MID not found"
        return ${_false_}
      fi

      # edit mid
      answer "Do you want to edit ${_h}?"
      local _cso=$(sys/cksum "${_mid}")
      if test $? -eq 0 ; then
        sys/edit "${_mid}"
        if test $? -gt 0 ; then
          msg "Editor failed"
          return ${_false_}
        fi
      fi
      local _csn=$(sys/cksum "${_mid}")
      if ! test "${_cso}" = "${_csn}" ; then
        msg "MID changed"
        return ${_true_}
      fi
      msg "MID not changed"
      return ${_false_}
      ;;
    PASS)
      import ssh/key
      ssh/key/chg "${_h}"
      ;;
    INFO)
      ssh/info "${_h}"
      ;;
    CHECK)
      ssh/check "${_h}"
      ;;
    CREATE)
      answer "Create new SSH MID ${_h}?"
      if test $? -gt 0 ; then
        return ${_false_}
      fi

      # check mid
      local _mid="${sys_mid_dir}/ssh/${_h}"
      if test -r "${_mid}" ; then
        msg "MID ${_h} exists, delete first"
        return ${_false_}
      fi
      cp -f "${sys_mid_dir}/${ssh_template}" "${_mid}"

      # edit mid
      answer "Do you want to edit ${_h} now?"
      if test $? -eq 0 ; then
        sys/edit "${_mid}"
        if test $? -gt 0 ; then
          msg "Editor failed"
          return ${_false_}
        fi
      fi

      # load mid
      sys/mid "ssh/${_h}"
      if test $? -gt 0 ; then
        return ${_false_}
      fi

      # test connection
      if $(u/installed nmap) ; then
        import net/port
        answer "Do you want to check connection to ${_h}?"
        if test $? -eq 0 ; then
          ssh/fqdn "${_h}" "${mid_ssh_fqdn}"
          net/port/test ${mid_ssh_fqdn} ${mid_ssh_port} &>/dev/null
          if test $? -gt 0 ; then
            msg "Connection failed"
          else
            msg "Connection success"
          fi
        fi
      fi

      # check type
      if test "${mid_ssh_type}" = "gsi" ; then
        # TODO: import
        msg "Please install key and certificate manually!"
        return ${_true_}
      fi

      # generate keys
      answer "Do you want to generate keys for ${_h}?"
      if test $? -gt 0 ; then
        msg "Please install keys manually!"
        return ${_true_}
      fi
      import ssh/key
      ssh/key/gen "${_h}"
      if test $? -gt 0 ; then
        msg "Generation failed"
        return ${_false_}
      fi
      return ${_true_}
      ;;
    DELETE)
      answer "Do you want to delete ${_h}?"
      if test $? -gt 0 ; then
        return ${_false_}
      fi
      answer "Are you sure?"
      if test $? -gt 0 ; then
        return ${_false_}
      fi

      # mid
      local _mid="${sys_mid_dir}/ssh/${_h}"
      if ! test -r "${_mid}" ; then
        return ${_false_}
      fi
      rm -f "${_mid}"

      # keys
      answer "Delete keys?"
      if test $? -gt 0 ; then
        return ${_false_}
      fi

      import sys/dir
      import ssh/key
      # in ${ssh_key_dir}
      sys/dir/svwd "${ssh_key_dir}"

      # delete
      local i
      for i in ${_h}.* ; do
        if ! test -z "${i}" && test -e "${i}" ; then
          rm -f "${i}"
        fi
      done
      ;;
    GRID)
      import ssh/key/crt
      ssh/key/crt/upd "${_h}"
      ;;
    PUBKEY)
      import ssh/key
      local _pub=$(ssh/key "${_h}" "${ssh_key_pub}")
      if ! test -r "${_pub}" ; then
        msg "Key not found: ${_pub}"
        return ${_false_}
      fi
      cat "${_pub}"
      ;;
  esac
}

function ssh/check() {
  import sys
  local _h="${1:-default}"

  sys/mid "ssh/${_h}"
  if test $? -gt 0 ; then
    $failure
  fi

  ssh/conchk "${_h}"
  return $?
}

function ssh/info() {
  import sys
  import gui
  import ssh/key
  local _h="${1:-default}"

  sys/mid "ssh/${_h}"
  if test $? -gt 0 ; then
    return ${_false_}
  fi

  echo
  msg "SSH MID for ${_h} (${mid_ssh_fqdn})"
  echo
  echo "Type        : ${mid_ssh_type}"
  echo "URL         : ${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_port}"
  if ! empty "${mid_tor_fqdn}" ; then
    echo "Tor URL     : ${mid_ssh_user}@${mid_tor_fqdn}"
  fi
  echo "SSH Opts    : ${mid_ssh_ssh_opt}"
  echo "SCP Opts    : ${mid_ssh_scp_opt}"
  echo "SSH Env     : ${mid_ssh_env}"
  echo "SSH Tunnel  : ${mid_ssh_tunnel}"
  echo "SCP Dest    : ${mid_ssh_scp_dst}"
  echo "SSHFS Mnt   : ${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_sshfs_dst}"
  echo "SSHFS Opts  : ${mid_ssh_sshfs_opt}"
  echo

  ### gsi
  if test "${mid_ssh_type}" = "gsi" ; then
    local _crt="$(ssh/key/crt ${_h})"
    if ! test -r "${_crt}" ; then
      msg "Certificate not found"
      return ${_false_}
    fi
    import ssh/gsi
    ${ssh_gsi_openssl} x509 -noout -issuer \
                            -subject -dates \
                            -fingerprint -in "${_crt}" | \
    awk '{
      if(match($0,"^issuer")) {
        gsub(/issuer= */,"");
        print "Issuer      :",$0;
      }
      if(match($0,"^subject")) {
        gsub(/subject= */,"");
        print "Subject     :",$0;
      }
      if(match($0,"^notBefore")) {
        gsub(/notBefore= */,"");
        print "Valid from  :",$0;
      }
      if(match($0,"^notAfter")) {
        gsub(/notAfter= */,"");
        print "Expiry      :",$0;
      }
      if(match($0,"Fingerprint")) {
        gsub(/.*Fingerprint= */,"");
        print "Fingerprint :",$0;
      }
    }'
    return $?
  fi
  ### ssh
  echo "Host Key:"
  gui/line
  ${ssh_key_gen} -lv -F ${mid_ssh_fqdn}

  echo ""
  echo "Public Key:"
  gui/line
  local _pub="$(ssh/key/pub ${_h})"
  if ! test -r "${_pub}" ; then
    msg/warn "Key not found ${_pub}"
    return ${_false_}
  fi
  ${ssh_key_gen} -v -l -f "${_pub}" | \
  awk '{
    if(NR==1) {
      print "Key length  :",$1;
      print "Fingerprint :",$2;
      print "Type        :",$4;
      print "";
    }
    else
      print;
  }'
}

function help/ssh/login() {
  cat << EOF
Logins to host

\$1 string  host
\$2 logical (true=force)
EOF
}

function ssh/ishop() {
  local _h=$*
  if empty "${_h}" ; then
    $failure
  fi
  local _h1=$(field "${_h}" 1 "/")
  local _h2=$(field "${_h}" 2 "/")
  if test "${_h1}" != "${_h2}" ; then
    $success
  fi
  $failure
}

# TODO: better names
function ssh/login() {
  import gui
  import sys
  import sys/lck
  import ssh/key
  local _mid="${1:-default}"
  local _hop=false
  local _f="${2:-false}"

  # hoping
  local _hoping=false
  if ssh/ishop "${_mid}" ; then
    _hoping=true
  fi
  if ${_hoping} ; then
    _hop=$(field "${_mid}" 1 "/")
    _mid=$(field "${_mid}" 2 "/")
  fi

  # init
  sys/mid "ssh/${_mid}"
  if failed $? ; then $failure; fi

  # hoping
  if ${_hoping} ; then
    import ssh/hop
    local _hop_cmd=""
    ssh/hop "${_hop}"
  fi

  # check connection
  ssh/conchk "${_hop}"
  if failed $? ; then $failure; fi

  # reinit endpoint
  sys/mid "ssh/${_mid}"

  local _lck="${_mid}.${gbn}"
  # force
  if ${_f} ; then sys/lck/rm "${_lck}" ; fi

  # opts
  local _opt="${mid_ssh_ssh_opt}"

  # tunnel
  local _tunnel=false

  # TODO: hoping tunnels
  if ! ${_hoping} ; then
    if ! test -z "${mid_ssh_tunnel}" ; then
      if sys/lck/mk "${_lck}" ; then
        _tunnel=true
        _opt="${_opt} ${mid_ssh_tunnel}"
        # TODO: tunnel parse
        msg "Connect tunnels: ${mid_ssh_tunnel}"
      else
        msg "Active tunnels: ${mid_ssh_tunnel}"
      fi
    fi
  fi

  if test "${mid_ssh_type}" = "gsi" ; then
    # gsi
    import ssh/gsi
    ssh/gsi/init "${_mid}"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    gui/line
  else
    # ssh
    local _sec="$(ssh/key/sec ${_mid})"
    # check
    if test -r "${_sec}" ; then
      _opt="${_opt} -i ${_sec}"
    else
      msg "Key not found ${_sec}"
    fi
  fi

  # debug
  if ${gdbg} ; then
    _opt="-v ${_opt}"
  fi

  ssh/fqdn "${_mid}" "${mid_ssh_fqdn}"
  local _fqdn="${mid_ssh_fqdn}"
  if ${_hoping} ; then
    # _opt="${_opt} -o CheckHostIP=no"
    _opt="${_opt} -o ProxyCommand='${_hop_cmd}'"
    if test "${_hop}" = "tor" ; then
      _fqdn="${mid_tor_fqdn}"
    fi
  fi

  # login
  local _url="${mid_ssh_user}@${_fqdn}"
  msg "URL  : ${_url}"
  gui/line
  local _cmd="${ssh_ssh} ${_opt} ${_url}"
  msg/debug "${_cmd}"
  eval ${_cmd}
  local _ret=$?

  gui/line
  # grid proxy destroy
  if test "${mid_ssh_type}" = "gsi" ; then
    ssh/gsi/destroy
  fi

  # clear tunnel lock
  if ${_tunnel} ; then
    sys/lck/rm "${_lck}"
  fi
  return ${_ret}
}

function help/ssh/xfer() {
  cat << EOF
SSH transfer

\$1 string host
\$2 integer mode
\$3 logical (true=recursive)
\$4 string  source
\$5 string  destination

mode:
     scp  tar/ssh  rsync/ssh
put    1        2          3
get   11       12         13
EOF
}

function ssh/xfer() {
  import gui
  import sys
  import ssh/key
  local _mid="${1:-default}"
  local _hop=false
  # mode
  local _m="${2:-1}"
  # recursive
  local _r=${3:-false}
  local _src="${4}"
  local _dst="${5:-./}"

  local _put=true
  local _mode=$((_m%10))
  if test $((_m/10)) -gt 0 ; then
    _put=false
  fi

  # hoping
  local _hoping=false
  if ssh/ishop "${_mid}" ; then
    _hoping=true
  fi
  if ${_hoping} ; then
    _hop=$(field "${_mid}" 1 "/")
    _mid=$(field "${_mid}" 2 "/")
  fi

  # init
  sys/mid "ssh/${_mid}"
  if failed $? ; then $failure ; fi

  # hoping
  if ${_hoping} ; then
    import ssh/hop
    local _hop_cmd=""
    ssh/hop "${_hop}"
  fi

  # connection check
  ssh/conchk "${_hop}"
  if failed $? ; then $failure; fi

  # reinit hoping endpoint
  sys/mid "ssh/${_mid}"

  ssh/fqdn "${_mid}" "${mid_ssh_fqdn}"
  local _fqdn="${mid_ssh_fqdn}"
  if ${_hoping} ; then
    if test "${_hop}" = "tor" ; then
      _fqdn="${mid_tor_fqdn}"
    fi
  fi

  # source
  local _src_url="${mid_ssh_user}@${_fqdn}:${mid_ssh_scp_dst}"

  if ${_put} ; then
    if ! test -r "${_src}" ; then
      msg "Not found ${_src}"
      return ${_false_}
    fi
  else
    _src_url="${_src_url}/${_src}"
  fi

  # select mode
  case ${_mode} in
    1)
      local _opt="${mid_ssh_scp_opt}"
      if ${_r} ; then
        _opt="-r ${_opt}"
      fi
      local _url="${_src_url}"
      local _mtxt="scp"
    ;;
    2)
      local _opt="-p ${mid_ssh_port}"
      local _url="${mid_ssh_user}@${_fqdn}"
      local _mtxt="tar/ssh"
    ;;
    3)
      local _opt="-p ${mid_ssh_port}"
      local _url="${_src_url}"
      local _mtxt="rsync/ssh"
      local _rsync_opt="${ssh_rsync_opt}"
      if ${_r} ; then
        _rsync_opt="${_rsync_opt} -r -k -L"
      fi
    ;;
    4)
      local _opt="-p ${mid_ssh_port}"
      local _url="${_src_url}"
      local _mtxt="rsync/ssh"
      local _rsync_opt="${ssh_rsync_opt} -aH --delete"
    ;;
    *) sp_f_err "Invalid mode"
       return ${_false_}
    ;;
  esac

  if ${_hoping} ; then
    # _opt="${_opt} -o CheckHostIP=no"
    case "${_mode}" in
      3)
        _hop_cmd=$(echo "${_hop_cmd}" | sed s/\"/\\\\\"/g)
      ;;
    esac
    _opt="${_opt} -o ProxyCommand='${_hop_cmd}'"
  fi

  # begin gsi
  if test "${mid_ssh_type}" = "gsi" ; then
    # gsi
    import ssh/gsi
    ssh/gsi/init "${_mid}"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    gui/line
  else
    # private key
    local _sec="$(ssh/key/sec ${_mid})"
    if test -r "${_sec}" ; then
      _opt="${_opt} -i ${_sec}"
    else
      msg "Key not found ${_sec}"
    fi
  fi

  # info
  msg "Mode : ${_mtxt}"
  if ${_put} ; then
    msg "From : ${_src}"
    msg "To   : ${_url}"
  else
    msg "From : ${_src_url}"
    msg "To   : ${_dst} ($(pwd ${_dst}))"
  fi
  gui/line

  answer "Start transfer?"
  if test $? -gt 0 ; then 
    return ${_false_};
  fi
  gui/line

  local _cmd=""
  # xfer
  case ${_mode} in
    1)
      if ${_put} ; then
        _cmd="${ssh_scp} ${_opt} \"${_src}\" ${_url}"
      else
        _cmd="${ssh_scp} ${_opt} ${_url} \"${_dst}\""
      fi
    ;;
    2)
      if ${_put} ; then
        _cmd="${ssh_tar} cvf - \"${_src}\" | ${ssh_ssh} ${_opt} ${_url} \"(cd \"${mid_ssh_scp_dst}\";tar xvf -)\""
      else
        _cmd="${ssh_ssh} ${_opt} ${_url} \"(cd \"${mid_ssh_scp_dst}\";tar cvf - \"${_src}\")\" | (cd \"${_dst}\"; ${ssh_tar} xvf -)"
      fi
    ;;
    3)
      if ${_put} ; then
        _cmd="${ssh_rsync} -a -z -v ${_rsync_opt} --partial --progress -e \"${ssh_ssh} ${_opt}\" \"${_src}\" ${_url}"
      else
        _cmd="${ssh_rsync} -a -z -v ${_rsync_opt} --partial --progress -e \"${ssh_ssh} ${_opt}\" ${_url} \"${_dst}\""
      fi
    ;;
  esac

  # xfer
  msg/debug "${_cmd}"
  eval ${_cmd}
  local _ret=$?

  gui/line
  # grid proxy destroy
  if test "${mid_ssh_type}" = "gsi" ; then
    ssh/gsi/destroy
  fi
  return ${_ret}
}

function ssh/put() {
  local _mid="${1:-default}"
  local _s="${2}"
  local _m="${3:-1}"
  local _r=${4:-false}
  if test -z "${_mid}" || test -z "${_s}" ; then
    $failure
  fi
  _m=$((_m%10))
  ssh/xfer "${_mid}" ${_m} ${_r} "${_s}"
}

function ssh/get() {
  local _mid="${1:-default}"
  local _s="${2}"
  local _m="${3:-11}"
  local _r=${4:-false}
  if test -z "${_mid}" || test -z "${_s}" ; then
    $failure
  fi
  _m=$((_m%10+10))
  ssh/xfer "${_mid}" ${_m} ${_r} "${_s}"
}


function help/ssh/cmd() {
  cat << EOF
\$1 string  mid
\$2 string  "command"
\$3 logical (true=force tty)
EOF
}

function ssh/cmd() {
  import sys
  import ssh/key
  local _mid="${1:-default}"
  local _hop=false
  local _x="${2:-ls -lA ${mid_ssh_scp_dst}}"
  local _t=${3:-false}

  echo ""
  # hoping
  local _hoping=false
  if ssh/ishop "${_mid}" ; then
    _hoping=true
  fi
  if ${_hoping} ; then
    _hop=$(field "${_mid}" 1 "/")
    _mid=$(field "${_mid}" 2 "/")
  fi

  sys/mid "ssh/${_mid}"
  if test $? -gt 0 ; then
    $failure
  fi

  # hoping
  if ${_hoping} ; then
    import ssh/hop
    local _hop_cmd=""
    ssh/hop "${_hop}"
  fi

  # connection check
  ssh/conchk "${_hop}"
  if failed $? ; then $failure; fi

  # reinit hoping endpoint
  sys/mid "ssh/${_mid}"

  # opts
  local _opt="${mid_ssh_ssh_opt}"

  # force tty
  if ${_t} ; then
    _opt="-t ${_opt}"
  fi

  # begin gsi
  if test "${mid_ssh_type}" = "gsi" ; then
    # gsi
    import ssh/gsi
    ssh/gsi/init "${_mid}"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    gui/line
  else
    # private key
    local _sec="$(ssh/key/sec ${_mid})"
    if test -r "${_sec}" ; then
      _opt="${_opt} -i ${_sec}"
    else
      msg "Key not found ${_sec}"
    fi
  fi

  # debug
  if ${gdbg} ; then
    _opt="-v ${_opt}"
  fi

  ssh/fqdn "${_mid}" "${mid_ssh_fqdn}"
  local _fqdn="${mid_ssh_fqdn}"
  if ${_hoping} ; then
    # _opt="${_opt} -o CheckHostIP=no"
    _opt="${_opt} -o ProxyCommand='${_hop_cmd}'"
    if test "${_hop}" = "tor" ; then
      _fqdn="${mid_tor_fqdn}"
    fi
  fi

  local _url="${mid_ssh_user}@${_fqdn}"
  msg "URL  : ${_url}"
  msg "cmd  : ${_x}"
  gui/line
  answer "Run command?"
  if test $? -gt 0 ; then 
    return ${_false_};
  fi

  # ssh
  if ! test -z "${mid_ssh_env}"; then
    _x="source \\\${HOME}/${mid_ssh_env};echo;${_x}"
  fi
  local _cmd="${ssh_ssh} ${_opt} ${_url} ${_x}"
  eval ${_cmd}
  local _ret=$?

  gui/line
  # grid proxy destroy
  if test "${mid_ssh_type}" = "gsi" ; then
    ssh/gsi/destroy
  fi
  return ${_ret}
}

# TODO: merge
function ssh/exec() {
  import sys
  import ssh/key
  local _mid="${1:-default}"
  local _hop=false
  local _x="${2:-ls -lA ${mid_ssh_scp_dst}}"
  local _t=${3:-false}

  echo ""
  # hoping
  local _hoping=false
  if ssh/ishop "${_mid}" ; then
    _hoping=true
  fi
  if ${_hoping} ; then
    _hop=$(field "${_mid}" 1 "/")
    _mid=$(field "${_mid}" 2 "/")
  fi

  sys/mid "ssh/${_mid}"
  if test $? -gt 0 ; then
    $failure
  fi

  # hoping
  if ${_hoping} ; then
    import ssh/hop
    local _hop_cmd=""
    ssh/hop "${_hop}"
  fi

  # connection check
  ssh/conchk "${_hop}"
  if failed $? ; then $failure; fi

  # reinit hoping endpoint
  sys/mid "ssh/${_mid}"

  # opts
  local _opt="${mid_ssh_ssh_opt}"

  # force tty
  if ${_t} ; then
    _opt="-t ${_opt}"
  fi

  # begin gsi
  if test "${mid_ssh_type}" = "gsi" ; then
    # gsi
    import ssh/gsi
    ssh/gsi/init "${_mid}"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    gui/line
  else
    # private key
    local _sec="$(ssh/key/sec ${_mid})"
    if test -r "${_sec}" ; then
      _opt="${_opt} -i ${_sec}"
    fi
  fi

  # debug
  if ${gdbg} ; then
    _opt="-v ${_opt}"
  fi

  ssh/fqdn "${_mid}" "${mid_ssh_fqdn}"
  local _fqdn="${mid_ssh_fqdn}"
  if ${_hoping} ; then
    # _opt="${_opt} -o CheckHostIP=no"
    _opt="${_opt} -o ProxyCommand='${_hop_cmd}'"
    if test "${_hop}" = "tor" ; then
      _fqdn="${mid_tor_fqdn}"
    fi
  fi

  local _url="${mid_ssh_user}@${_fqdn}"

  # ssh
  # eval pipe problem
  ${ssh_ssh} -t ${_opt} ${_url} ${_x}
  local _ret=$?

  # grid proxy destroy
  if test "${mid_ssh_type}" = "gsi" ; then
    ssh/gsi/destroy
  fi
  return ${_ret}
}


function ssh/conchk() {
  if test "${_v}" = "tor" ; then
    if empty "${mid_tor_proxy}" ; then
      $success
    fi
    local _ph=$(field "${mid_tor_proxy}" 1 ":")
    local _pp=$(field "${mid_tor_proxy}" 2 ":")
    ${ssh_nmap} -P0 -p ${_pp} ${_ph} 2>/dev/null | grep open &>/dev/null
    if failed $? ; then
      msg "nmap: Connection FAILED"
      $failure
    fi
    $success
  fi

  # verbose
  local _v=false
  if test "${1}" == "true" ; then
    _v=true
  fi

  if empty "${mid_ssh_port_check}" ; then
    if ${_v} ; then
      msg "mid_ssh_port_check not set"
    fi
    $success
  fi
  local i

  # ssh/fqdn "${_mid}" "${mid_ssh_fqdn}"
  for i in ${mid_ssh_port_check} ; do
    if test "${i}" = "ping" ; then
      ${ssh_ping} ${mid_ssh_fqdn} &> /dev/null
      if failed $? ; then
        msg "ping: Connection FAILED"
        $failure
      fi
      if ${_v} ; then
        msg "ping: Connection OK"
      fi
    fi
    if test "${i}" = "nmap" ; then
      ${ssh_nmap} -P0 -p ${mid_ssh_port} ${mid_ssh_fqdn} 2>/dev/null | grep open &>/dev/null
      if failed $? ; then
        msg "nmap: Connection FAILED"
        $failure
      fi
      if ${_v} ; then
        msg "nmap: Connection OK"
      fi
    fi
  done
  $success
}
