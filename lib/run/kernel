
function help/run/prg() {
  cat << EOF
Program run wrapper

\$1 string  - mode
\$2 integer - check level
\$3 string  - program
\$4 string  - guide file
\$5 string  - scheduler

mode:
 B - batch
 I - interacitve
EOF
}

function run/prg() {
  import sys/dir
  import sys/lnk
  import run/check
  import run/mail
  import run/clean
  import gui

  local _mode=${1:-B}
  local _chk=${2:-0}
  local _prg=${3}
  local _guide=${4}
  local _sch=${5}

  ### check
  run/check ${_chk} "${_prg}" "${_guide}"
  if test $? -gt 0 ; then
    return ${_false_}
  fi

  # read guide
  source "${_guide}"


  ### import

  # program
  import run/prg/${_prg}
  if test $? -gt 0 ; then
    msg "Module not found: run/prg/${_prg}"
    return ${_false_}
  fi

  # set scheduler
  if ! test -z "${_sch}" ; then
    import que/${_sch}
    if test $? -gt 0 ; then
      msg "Module not found: que/${_sch}"
      return ${_false_}
    fi

    SCHEDULER=${_sch}

    # set broadcast
    local _bca="que_${_sch}_qbca"
    BROADCAST=${!_bca}

    msg "Scheduler : ${SCHEDULER}"
  fi


  ### begin run

  # enter inputdir
  local _idir=$(ns/op/value "${INPUTDIR}" "+")
  sys/dir/svwd "${_idir}"
  msg "Inputdir  : ${_idir}"

  # create workdir
  if test -z "${WORKDIR}" ; then
    msg "Directory not found: \$WORKDIR"
    return ${_false_}
  fi
  local _wdir=$(ns/op/value "${WORKDIR}" "+")
  if ! $(sys/dir/mk "${_wdir}") ; then
    msg "Create directory failed: ${WORKDIR}"
    return ${_false_}
  fi
  msg "Workdir   : ${_wdir}"

  # create resultdir
  if test -z "${RESULTDIR}" ; then
    msg "Directory not found: \$RESULTDIR"
    run/clean WORKDIR
    return ${_false_}
  fi
  local _rdir=$(ns/op/value "${RESULTDIR}" "+")
  if ! $(sys/dir/mk "${_rdir}") ; then
    msg "Create directory failed: ${RESULTDIR}"
    run/clean WORKDIR
    return ${_false_}
  fi
  msg "Resultdir : ${_rdir}"


  ### broadcast

  # create stagedir for broadcast
  if $(ns/op "${WORKDIR}" "+") ; then
    local _sdir="${run_stage_dir}/stage-${_prg}-${USER}-$$"
    if ! test -z "${STAGEDIR}" ; then
      _sdir="${STAGEDIR}"
    else
      STAGEDIR="${_sdir}"
    fi
    if ! $(sys/dir/mk "${_sdir}") ; then
      run/clean WORKDIR
      return ${_false_}
    fi
    msg "Stage  : ${_sdir}"
  fi

  # workdir link
  WORKDIRLINK="${_idir}/${_prg}-${$}"
  if ! $(ns/op "${WORKDIR}" "+") ; then
    sys/lnk/mk "${_wdir}" "${WORKDIRLINK}"
  fi


  ### program init

  if test "${_mode}" = "I" ; then
    echo ""
    answer "run/prg/${_prg}/init?"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    echo ""
  fi

  # init inputs & data file
  run/prg/${_prg}/init
  if test $? -gt 0 ; then
    if test "${ONERR}" = "clean" ; then
      run/clean WORKDIR STAGEDIR
      sys/lnk/rm "${WORKDIRLINK}"
    fi
    return ${_false_}
  fi

  # delete stage dir
  if $(ns/op "${WORKDIR}" "+") ; then
    sys/dir/rm "${_sdir}"
    if test $? -gt 0 ; then
      msg "Stage clean failed"
    fi
  fi


  ### program run

  # enter work dir
  sys/dir/svwd "${_wdir}"

  # list inputs
  echo ""
  sys/dir/lsl . "Inputs in ${_wdir}"

  # MPI & options
  local _out=${_prg}.output
  local _cmd="${PRGBIN}"

  if ! test -z "${PRERUN}" ; then
    _cmd="${PRERUN} ${_cmd}"
  fi

  if ! test -z "${PRGOPT}" ; then
    _cmd="${_cmd} ${PRGOPT}"
  fi

  echo ""
  # lib override
  # Format: colon separated list
  if ! test -z "${LDLIB}" ; then
    if test -z "${LD_LIBRARY_PATH}" ; then
      export LD_LIBRARY_PATH="${LDLIB}"
    else
      export LD_LIBRARY_PATH="${LDLIB}:${LD_LIBRARY_PATH}"
    fi
    msg "LD_LIBRARY_PATH: ${LDLIB}"
  fi

  # preload override
  # Format: space separated list
  if ! test -z "${LDPRE}" ; then
    if test -z "${LD_PRELOAD}" ; then
      export LD_PRELOAD="${LDPRE}"
    else
      export LD_PRELOAD="${LDPRE} ${LD_PRELOAD}"
    fi
    msg "LD_PRELOAD: ${LDPRE}"
  fi

  if test "${_mode}" = "I" ; then
    answer "Run command?"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    echo ""
    echo ""
  fi


  ### run

  local _inp=$(ns/op/value "${MAIN}")

  run/mail "Program ${_prg} started"
  msg "Program : ${_cmd}"
  msg "Input   : ${_inp}"
  msg "Output  : ${_out}"

  # start timer
  local _t0=$(epoch)
  # start program
  if $(ns/op "${MAIN}" "<") ; then
    ${_cmd} < "${_inp}" &> "${_out}"
  elif $(ns/op "${MAIN}" "-") ; then
    ${_cmd} &> "${_out}"
  else
    ${_cmd} "${_inp}" &> "${_out}"
  fi
  _exit=$?
  # stop timer
  local _t1=$(epoch)

  msg "Elapsed : $(elapsed ${_t0} ${_t1})"

  # exit check
  if test ${_exit} -gt 0 ; then
    msg "Error   : ${_exit}"
    if test "${ERROR}" = "stop" ; then
      exit ${_exit}
    fi
  else
    msg "Success"
  fi

  # output save mode
  echo ""
  if test -z "${ERROR}" ; then
    ERROR="clean"
  fi
  local _oemsg=""
  case "${ERROR}" in 
    "clean")
      if test ${_exit} -gt 0 ; then
        _oemsg="cleaned"
      else
        _oemsg="saved"
      fi
    ;;
    "save")
      if test ${_exit} -gt 0 ; then
        _oemsg="saved"
      else
        _oemsg="saved"
      fi
    ;;
  esac
  msg "Outputs are ${_oemsg}"

  # list output
  # echo ""
  sys/dir/lsl . "Outputs in ${_wdir}"

  # program exit check
  if test ${_exit} -gt 0 && \
     test "${ERROR}" = "clean" ; then
    run/clean WORKDIR STAGEDIR
    sys/lnk/rm "${WORKDIRLINK}"

    local _emsg="Program failed (exit code ${_exit})"
    msg "${_emsg}"
    run/mail "${_emsg}"
    return ${_ret}
  fi


  ### finish

  if test "${_mode}" = "I" ; then
    echo ""
    answer "run/prg/${_prg}/finish?"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
    echo ""
  fi

  run/prg/${_prg}/finish
  _ret=$?
  if test ${_ret} -gt 0 && \
     test "${ERROR}" = "clean" ; then
    run/clean WORKDIR STAGEDIR
    sys/lnk/rm "${WORKDIRLINK}"

    local _emsg="run/prg/${_prg}/finish failed (exit code ${_ret})"
    msg "${_emsg}"
    run/mail "${_emsg}"
    return ${_ret}
  fi


  ### save

  # list output
  if test -z "${RESULT}" ; then
    RESULT="*"
  fi
  echo ""
  sys/dir/lsl "${RESULT}" "Saved outputs in ${_wdir}"

  run/prg/${_prg}/save
  _ret=$?
  if test ${_ret} -gt 0 ; then
    if test "${ERROR}" = "clean" ; then
      run/clean WORKDIR STAGEDIR
      sys/lnk/rm "${WORKDIRLINK}"
    fi
    local _emsg="run/prg/${_prg}/save failed (exit code ${_ret})"
    msg "${_emsg}"
    run/mail "${_emsg}"
    return ${_ret}
  fi

  # final clean
  run/clean WORKDIR STAGEDIR
  sys/lnk/rm "${WORKDIRLINK}"

  local _emsg="Program ${_prg} complete"
  if test ${_exit} -gt 0 ; then
    local _emsg="Program failed (exit code ${_exit})"
  fi

  msg "${_emsg}"
  run/mail "${_emsg}"
  return ${_exit}
}
