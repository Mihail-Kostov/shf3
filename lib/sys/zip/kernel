function help/sys/zip() {
  echo "Compression module"
}

function help/sys/zip/cpuzmv() {
  cat << EOF
Copy source to directory and uncompress then rename to name

Arguments:
\$1 string source
\$2 string directory
\$3 string name

Environment:
PREFIX
EOF
}

function sys/zip/cpuzmv() {
  import sys/dir
  local _src="${1}"
  local _dir="${2}"
  local _dst="${3}"
  local _pre="${PREFIX}"
  local _ret=${_true_}

  if test -z "${_src}" || \
     test -z "${_dir}" ; then
    return ${_false_}
  fi
  if ! test -r "${_src}" || \
     ! test -d "${_dir}" ; then
    return ${_false_}
  fi
  # 1. recursive copy
  cp -Rf "${_src}" "${_dir}"
  if test $? -gt 0 ; then
    return ${_false_}
  fi

  # 2. decompress
  _dst=$(basename "${_dst}")
  _src=$(basename "${_src}")

  if test -d "${_dir}/${_src}" ; then
    sys/zip/x "${_dir}/${_src}" "${_dir}"
  elif test -f "${_dir}/${_src}" ; then
    sys/zip/x "${_dir}/${_src}" "${_dir}"
    if test -f "${_dir}/${_src%.??}" ; then
      _src=${_src%.??}
    fi
  else
    msg "Not supported type: ${_dir}/${_src}"
    return ${_false_}
  fi

  if test $? -gt 0 ; then
    return ${_false_}
  fi

  # prefix
  if ! test -z "${_pre}" ; then
    if test -z "${_dst}" ; then
      _dst="${_src}"
    fi
    _dst=${_dst##${_pre}.}
  fi

  # 3. move (rename)
  if ! test -z "${_dst}" ; then
    # directory
    if test -d "${_dir}/${_src}" ; then
      # remove destination
      if test -d "${_dir}/${_dst}" ; then
        rm -fR "${_dir}/${_dst}"
        if test $? -gt 0 ; then
          return ${_false_}
        fi
      fi
    fi
    mv -f "${_dir}/${_src}" "${_dir}/${_dst}"
  fi
}


function help/sys/zip/zsvmv() {
  cat << EOF
Save and compress source to directory and rename to name

\$1 string source
\$2 string directory
\$3 string name
EOF
}


function sys/zip/zsvmv() {
  import sys/dir

  local _src="${1}"
  local _src_dir=$(dirname "${_src}")
  local _dir="${2}"

  if test -z "${_src}" || \
     test -z "${_dir}" ; then
    return ${_false_}
  fi
  if ! test -r "${_src}" || \
     ! test -d "${_dir}" ; then
    return ${_false_}
  fi

  # directories
  if test -d "${_src}" ; then
    if ${gdbg} ; then
      sys/zip/dir c "${_src}"
    else
      sys/zip/dir c "${_src}" &> /dev/null
    fi
    if test $? -gt 0 ; then
      msg "Compress failed: ${_src}"
      return ${_false_}
    fi

    # save old
    local _dst=$(basename "${_src}")
    local _old="${sys_zip_old}.${_dst}"
    if test -d "${_dir}/${_dst}" ; then
      if test -d "${_dir}/${_old}" ; then
        rm -Rf "${_dir}/${_old}"
        if test $? -gt 0 ; then
          msg "Delete failed: ${_dir}/${_old}"
          return ${_false_}
        fi
      fi

      # move
      mv -f "${_dir}/${_dst}" "${_dir}/${_old}"
      if test $? -gt 0 ; then
        msg "Move failed: ${_dir}/${_dst}"
        return ${_false_}
      fi
    fi
    # goto copy
  elif test -f "${_src}" ; then
    # compress
    if ${gdbg} ; then
      sys/zip/file c "${_src}" "${_src_dir}"
    else
      sys/zip/file c "${_src}" "${_src_dir}" &> /dev/null
    fi
    if test $? -gt 0 ; then
      msg "Compress failed: ${_src}"
      return ${_false_}
    fi

    if ! test -f "${_src}".?? ; then
      return ${_false_}
    fi
    _src=$(ls "${_src}".?? 2>/dev/null)

    # save
    local _dst=$(basename "${_src}")
    local _old="${sys_zip_old}.${_dst}"

    if test -f "${_dir}/${_dst}" ; then
      # backup
      mv -f "${_dir}/${_dst}" "${_dir}/${_old}"
      if test $? -gt 0 ; then
        msg "Save failed: ${_dir}/${_dst}"
        return ${_false_}
      fi
    fi
    # goto copy
  fi

#:copy
  cp -fR "${_src}" "${_dir}/${_dst}"
  if test $? -gt 0 ; then
    msg "Copy failed: ${_src}"
    return ${_false_}
  fi
  return ${_true_}
}


# extract wrapper
function sys/zip/x() {
  local _f="${1}"
  local _d="${2}"
  local _m=$(ns/func ${FUNCNAME})

  if test -z "${_f}" ; then
    return ${_false_}
  fi
  if test -d "${_f}" ; then
    sys/zip/dir ${_m} "${_f}"
    return $?
  fi
  if test -f "${_f}" ; then
    sys/zip/file ${_m} "${_f}" "${_d}"
    return $?
  fi
  return ${_false_}
}

# compress wrapper
function sys/zip/c() {
  local _f="${1}"
  local _d="${2}"
  local _m=$(ns/func ${FUNCNAME})

  if test -z "${_f}" ; then
    return ${_false_}
  fi
  if test -d "${_f}" ; then
    sys/zip/dir ${_m} "${_f}"
    return $?
  fi
  if test -f "${_f}" ; then
    sys/zip/file ${_m} "${_f}" "${_d}"
    return $?
  fi
  return ${_false_}
}

function sys/zip/file() {
  local _m="${1:-x}"
  local _f="${2}"
  local _d="${3}"

  if test -z "${_f}" || ! test -f "${_f}" ; then
    return ${_false_}
  fi

  # set compressor
  local _cmp="sys/zip/${sys_zip_cmp}"
  import ${_cmp}
  if test $? -gt 0 ; then
    msg "Module not found: ${_cmp}"
    return ${_false_}
  fi
  ${_cmp} ${_m} "${_f}" "${_d}"
}

function sys/zip/dir() {
  import sys/dir

  local _m="${1:-x}"
  local _f="${2}"

  if test -z "${_f}" || ! test -d "${_f}" ; then
    return ${_false_}
  fi

  # set compressor
  local _cmp="sys/zip/${sys_zip_cmp}"
  import ${_cmp}
  if test $? -gt 0 ; then
    msg "Module not found: ${_cmp}"
    return ${_false_}
  fi

  # recursive compressor
  local d
  for f in $(find "${_f}" -type f) ; do
    d=$(dirname "${f}")
    ${_cmp} ${_m} "${f}" "${d}"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
  done
  return ${_true_}
}
