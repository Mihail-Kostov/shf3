
function help/run/chk() {
  cat << EOF
Program check

\$1 integer - check level
\$2 string  - program
\$2 guide   - guide file

Check level:
 0 - program & guide
 1 - input directories
 2 - program specific
 3 - specific integrity
EOF
}

function run/chk() {
  import gui

  local _chk="${1:-0}"
  local _prg="${2}"
  local _guide="${3}"

  # header & timestamp
  gui/line
  msg "${FUNCNAME} $(date)"

  # check program
  if test -z "${_prg}" || ! test -x "${_prg}" ; then
    msg "Program not found: ${_prg}"
    return ${_false_}
  fi
  msg "Found program : ${_prg}"

  # check guide
  if test -z "${_guide}" || ! test -r "${_guide}" ; then
    msg "Guide not found: ${_guide}"
    return ${_false_}
  fi
  msg "Found guide   : ${_guide}"

  # read guide
  source "${_guide}"

  # basic checks
  if test ${_chk} -gt 0 ; then
    for inp in INPUTDIR LIBDIR ; do
      if ! test -d "${!inp}" ; then
        msg "Not a directory: ${!inp}"
        return ${_false_}
      fi
      msg "Found directory: ${inp}"
    done
  fi

  # specific check
  if test ${_chk} -gt 1 ; then
    import run/${_prg}
    run/${_prg}/chk ${_chk} "${_prg}" "${_guide}"
    if test $? -gt 0 ; then
      return ${_false_}
    fi
  fi

  return ${_true_}
}


function run/chk/input() {
  local _input="${1:-OTHERINPUTS}"

  if test -z "${OTHERINPUTS}" || \
     test -z "${INPUTDIR}" ; then
    return ${_false_}
  fi

  local i
  local _inp
  for i in ${!_input}; do
    _inp="${INPUTDIR}/${i}"
    if ! test -r "${_inp}" ; then
      msg "Not found: ${_inp}"
      return ${_false_}
    else
      msg "Found: ${_inp}"
    fi
  done
  return ${_true_}
}

