function ssh/help() {
  cat << EOF
SSH module
 - key management
 - ssh login
 - scp copy
 - sshfs fuse mount
EOF
}

function ssh/mgr() {
  import sys
  import gui
  local _m="${1:-LIST}"
  local _h="${2}"
  case "${_m}" in
    LIST)
      local _frm1="%-28s%-4s%-40s\n"
      local _typ="SSH"
      printf "${_frm1}" "mid" "url"
      gui/line 84
      local i
      for i in ${sys_mid_dir}/ssh/* ; do
        if test -r "${i}" ; then
          i=$(basename "${i}")
          sys/mid "ssh/${i}"
          _typ="SSH"
          if ${mid_ssh_gsi} ; then
            _typ="GSI"
          fi
          printf "${_frm1}" "${i}" "${_typ}" "${mid_ssh_user}@${mid_ssh_fqdn}"
        else
          printf "${_frm1}" "${i}" "---" "not readable"
        fi
      done
      ;;
    INFO)
      ssh/info "${_h}"
      ;;
    CREATE)
      return ${_false_}
      ;;
    DELETE)
      return ${_false_}
      ;;
  esac
}

function ssh/info() {
  import sys
  import gui
  import ssh/key
  local _h="${1:-default}"

  sys/mid "ssh/${_h}"
  if test $? -gt 0 ; then
    msg "No MID"
    return ${_false_}
  fi

  echo ""
  msg "SSH Host info ${_h} (${mid_ssh_fqdn})"
  gui/line 84
  echo "URL        : ${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_port}"
  echo "SSH Opts   : ${mid_ssh_ssh_opts}"
  echo "SCP Opts   : ${mid_ssh_scp_opts}"
  echo "SSH Env    : ${mid_ssh_env}"
  echo "SSH Proxy  : ${mid_ssh_proxy}"
  gui/line 84
  echo "SCP Dest   : ${mid_ssh_scp_dst}"
  echo "SCP Src    : ${mid_ssh_scp_src}"
  gui/line 84
  echo "SSHFS Mnt  : ${mid_ssh_sshfs_src} -> ${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_sshfs_dst}"
  echo "SSHFS Opts : ${mid_ssh_sshfs_opts}"
  gui/line 84

  if ! ${mid_ssh_gsi} ; then
    local _pub="$(ssh/key/pub ${_h})"
    if test -r "${_pub}" ; then
      ${ssh_key_gen} -v -l -f "${_pub}"
    else
      msg/warn "Key not found ${_pub}"
    fi
    gui/line 84
    local _lck="${_h}.${gbn}"
    return ${_true_}
  fi
  
  # gsi
  return ${_true_}
}


function ssh/login/help() {
  cat << EOF
Logins to <HOST>

\$1 CHARACTER(*) <HOST>
\$2 LOGICAL - force login
EOF
}

function ssh/login() {
  import gui
  import sys
  import sys/lck
  import ssh/key
  local _h="${1:-default}"
  local _f="${2:-false}"

  # init
  sys/mid "ssh/${_h}"
  if test $? -gt 0 ; then
    msg "No MID"
    return ${_false_}
  fi

  # clear lock
  local _lck="${_h}.${gbn}"
  if ${_f} ; then
    sys/lck/rm "${_lck}"
  fi

  # opts
  local _opts="${mid_ssh_ssh_opts}"

  # proxy
  local _proxy=false
  if ! test -z "${mid_ssh_proxy}" ; then
    if sys/lck/mk "${_lck}" ; then
      _proxy=true
      _opts="${_opts} ${mid_ssh_proxy}"
      # TODO: tunnel parse
      msg "Connect tunnels: ${mid_ssh_proxy}"
    else
      msg/warn "Active tunnels: ${mid_ssh_proxy}"
    fi
  fi

  ### select auth method
  if ${mid_ssh_gsi} ; then
    import ssh/gsi
    # init grid proxy
    local _sec="$(ssh/gsi/key/sec ${_h})"
    local _crt="$(ssh/gsi/key/crt ${_h})"
    # check
    # proxy init
  else
    # private key
    local _sec="$(ssh/key/sec ${_h})"
    # check
    if test -r "${_sec}" ; then
      _opts="${_opts} -i ${_sec}"
    else
      msg/warn "Key not found ${_sec}"
    fi
  fi

  # ssh
  local _url="${mid_ssh_user}@${mid_ssh_fqdn}"
  msg "Login to ${_url}"
  gui/line 84
  local _cmd="${ssh_ssh} ${_opts} ${_url}"
  msg/debug "${_cmd}"
  if ${mid_ssh_gsi} ; then
    # TODO
    X509_USER_PROXY= ${_cmd}
  else
    ${_cmd}
  fi
  local _ret=$?

  # clear lock
  if ${_proxy} ; then
    sys/lck/rm "${_lck}"
  fi
  return ${_ret}
}


function ssh/xfer/help() {
  cat << EOF
SSH transfer

\$1 CHARACTER(*) host
\$2 INTEGER      mode
\$3 LOGICAL      recursive
\$4 CHARACTER(*) source
\$5 CHARACTER(*) destination

mode:
     scp  tar/ssh  rsync/ssh
put    1        2          3
get   11       12         13
EOF
}

function ssh/xfer() {
  import sys
  import ssh/key
  local _h="${1:-default}"
  # mode number
  local _m="${2:-1}"
  # recursive
  local _r=${3:-false}
  local _src="${4}"
  local _dst="${5:-./}"

  local _put=true
  local _mode=$((_m%10))
  if test $((_m/10)) -gt 0 ; then
    _put=false
  fi

  # init
  sys/mid "ssh/${_h}"
  if test $? -gt 0 ; then
    msg "No MID"
    return ${_false_}
  fi

  # source
  local _src_url="${mid_ssh_user}@${mid_ssh_fqdn}:${mid_ssh_scp_dst}"

  if ${_put} ; then
    if ! test -r "${_src}" ; then
      msg "Not found ${_src}"
      return ${_false_}
    fi
  else
    _src_url="${_src_url}/${_src}"
  fi

  # select mode
  case ${_mode} in
    1)
      local _opts="${mis_ssh_scp_opts}"
      local _url="${_src_url}"
      local _mtxt="scp"
      if ${_r} ; then
        _opts="-r ${_opts}"
      fi
    ;;
    2)
      local _opts="-p ${mid_ssh_port}"
      local _url="${mid_ssh_user}@${mid_ssh_fqdn}"
      local _mtxt="tar/ssh"
    ;;
    3)
      local _opts="-p ${mid_ssh_port}"
      local _url="${_src_url}"
      local _mtxt="rsync/ssh"
    ;;
    *) sp_f_err "Invalid mode"
       return ${_false_}
    ;;
  esac

  # key
  local _sec="$(ssh/key/sec ${_h})"
  if test -r "${_sec}" ; then
    _opts="${_opts} -i ${_sec}"
  else
    msg/warn "Key not found ${_sec}"
  fi

  # info
  local _dtxt="\n From: ${_src}\n   To: ${_url}"
  if ! ${_put} ; then
    _dtxt="\n From: ${_src_url}\n   To: ${_dst} ($(pwd ${_dst}))"
  fi
  echo "Transfer (${_mtxt})\n${_dtxt}\n"
  gui/line 84

  answer "Start transfer?"
  if test $? -gt 0 ; then 
    return ${_false_};
  fi
  gui/line 84

  local _cmd=""
  # xfer
  case ${_mode} in
    1)
      if ${_put} ; then
        _cmd="${ssh_scp} ${_opts} \"${_src}\" ${_url}"
      else
        _cmd="${ssh_scp} ${_opts} ${_url} \"${_dst}\""
      fi
    ;;
    2)
      if ${_put} ; then
        _cmd="${ssh_tar} cvf - \"${_src}\" | ${ssh_ssh} ${_opts} ${_url} (cd \"${mid_ssh_scp_dst}\";tar xvf -)"
      else
        _cmd="${ssh_ssh} ${_opts} ${_url} (cd \"${mid_ssh_scp_dst}\";tar cvf - \"${_src}\") | (cd \"${_dst}\"; ${ssh_tar} xvf -)"
      fi
    ;;
    3)
      if ${_put} ; then
        _cmd="${ssh_rsync} -a -z -v --partial --progress -e \"${ssh_ssh} ${_opts}\" \"${_src}\" ${_url}"
      else
        _cmd="${ssh_rsync} -a -z -v --partial --progress -e \"${ssh_ssh} ${_opts}\" ${_url} \"${_dst}\""
      fi
    ;;
  esac
  msg/debug "${_cmd}"
  ${_cmd}
}

function ssh/put() {
  local _h="${1:-default}"
  local _m="${2:-1}"
  local _s="${3}"
  local _r=${4:-false}
  _m=$((_m%10))
  ssh/xfer "${_h}" ${_m} ${_r} "${_s}"
}

function ssh/get() {
  local _h="${1:-default}"
  local _m="${2:-1}"
  local _s="${3}"
  local _r=${4:-false}
  _m=$((_m%10+10))
  ssh/xfer "${_h}" ${_m} ${_r} "${_s}"
}


function ssh/cmd/help() {
  cat << EOF
\$1 CHARACTER(*) mid
\$2 CHARACTER(*) "command"
\$3 LOGICAL force tty
EOF
}

function ssh/cmd() {
  import sys
  import ssh/key
  local _h="${1:-default}"
  local _x="${2:-ls -lA ${mid_ssh_scp_dst}}"
  local _t=${3:-false}

  sys/mid "ssh/${_h}"
  if test $? -gt 0 ; then
    msg "No MID"
    return ${_false_}
  fi

  local _opts="${mid_ssh_opts}"
  # force tty
  if ${_t} ; then
    _opts="-t ${_opts}"
  fi

  # key
  local _sec="$(ssh/key/sec ${_h})"
  if test -r "${_sec}" ; then
    _opts="${_opts} -i ${_sec}"
  else
    msg/warn "Key not found ${_sec}"
  fi

  local _url="${mid_ssh_user}@${mid_ssh_fqdn}"
  msg "Run ${_x} on ${_url}"
  gui/line 84

  # ssh
  if ! test -z "${mid_ssh_env}" ; then
    _x="source \${HOME}/${mid_ssh_env};echo;${_x}"
  fi
  local _cmd="${ssh_ssh} ${_opts} ${_url} \"${_x}\""
  ${_cmd}
}
